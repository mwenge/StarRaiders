;
	.TITLE 'STAR RAIDERS.	VERSION 25.1	STARDATE-26-JUL-79'
;	
;	        GAME COMPLETE 17-JUN-79
;
;	        NOTES
;	RAM	0-1FFF
;	ROM	A0000-BFFF
;	SPILL OVER ROM	 9800-9FFF
;	E477G         	   ; PROG START
;
;	ALPHA CHARACTERS  IN DMA ASCII
;
;	*CAPS = ASCII EOR $20
;	NUMBERS = ASCII
;
;	40 CHAR = $CC00
;	20 CHAR (*CAPS, NUMBERS), = $CC00
;	20 CHAR (CAPS, LOWR CASE), = $CE00
;
;
;
;	UNIVERSE LOOKS LIKE 	SIGN	HI BYTE		LOW BYTE
;	-INFINITY	=	00	00		00
;	        0	=	01	00		00
;	+INFINITY	=	01	FF		FF
;	       -1	=	00	FF		FF
;
;
;
;	KEYCODE IS ORED WITH $C0
;
;
;
;
;
;	STRRAM MEMORY DEFINED	STRRAM+		TYPE	NOTES
;	             	        	     0		OBJ0	ZYLON
;	             	        	     1		OBJ1	ZYLON
;	             	        	     2		OBJ2	PHOTON
;	             	        	     3		OBJ3	PHOTON
;	             	        	     4		MISSILE	PHOTON
;	             	        	     5-N	PLAY.	STARS
;	             	        	  N+1-M 	PLAY.	EXPLOS STARS
;
;
;
;
	*=$0062
;	******************  POWER UP CLEARED RAM  ****************
MISDIF		; MISSION DIFFICULTY
	*=*+1
RESET		; ONE SHOT CONSOL KEY
	*=*+1
ATRACT		; GAME OVER FLAF =FF, ATRACT MODE
	*=*+1
REPMSG			; REPEAT MESSAGE BYTE
	*=*+1
TIMOUT		; ATRACT MODE TIMEOUT REG
	*=*+1
;	*******************************************************
PAGE0
PRGOST		; WAIT FOR VBLANK= 00
	*=*+1
	**********************  TEMP REG RAM  **********************
PNTR			; 2 BYTE MISC.  TEMPORARY REG POINTER
	*=*+2
TEMP			; TEMPORARY REGISTER
	*=*+1
TEMP1			; TEMP REG
	*=*+1
TEMP2
	*=*+1
TEMP3
	*=*+1
TEMP4
	*=*+1
NTEMP			; NMI TEMP REQ
	*=*+1
;	*************************************************************
;	********************  SHIP SPEED RAM  ***********************
SPEED			; SPEED O CURISER
	*=*+1
WARP			; SPEED DESIRED AS OPPOSED TO SPEED , THE PRESENT SPEED
	*=*+1
;	************************************************************
;	*******************  TIMERS RAM  ***************************
TIMERX		; USED FO STAR INTENSITY
	*=*+1
ETIMER			; EXPLOSION TIMEOUT
	*=*+1
SECOND			; SECOND TIMEOUT
	*=*+1
BSEQTM		; STARBASE SEQUENCER
	*=*+1
BINTIM		; BINARY TIMER
	*=*+1
BINNMI		; BINARY TIMER IN NMI
	*=*+1
JMPTIM		; TIME TO JUMP RAM LOC
	*=*+1
;	************************************************************
;	********************  STAR POINTER RAM  ********************
NSTARS	; LAST BYTE OF STAR RAM TO STORE, EITHER RMLAST OR STLAST
	*=*+1
CNSTAR		; LAST BYTE OF STAR RAM TO CLEAR
	*=*+1
BASFLG		; STARBASE FLAG
	*=*+1
TRKFLG		; AUTOTRACKING = FF
	*=*+1
SHENER		; SHIELD ENERGY 0 OR 8
	*=*+1
ATENER		; ATTACK COMPUTER ENERGY
	*=*+1
ENFLAG		; LS BYTE OF ENERGY , TELLS WHEN TO DEC ENERGY
	*=*+1
WPENER			; WARP ENRGY DEPENDS ON WARP
	*=*+1
;	************************************************************
;	**************  MISC RAM  **********************************
SPABAK			; SPACE BACKGROUND COLOR
	*=*+1
PHITS			; PHOTON HIT DETECT REGS
	*=*+2
PHOFLG		; ONE SHOT PHOTON
	*=*+1
PHOTIM			; REPEAT TIMEOUT
	*=*+1
LOKLOC			; PHOTON LOCK VECTOR PNTR
	*=*+1
PHOTOG			; PHOTON TOGGLE FLAG
	*=*+1
LOKWAT		; TIME BEFORE CAN LOCK AGAIN
	*=*+1
LOKTAR		; INDEX OF LOCK ON TARGET
	*=*+1
HITME		;  SHIP HIT FLAG
	*=*+1
REDFKG		; RED ALERT FLAG
	*=*+1
;		**************************************************
;	**********************  GALACTIC CHART RAM  ******************
GVPOS		; CRUISER VPOS ON CHART
	*=*+1
GHPOS		; CRUISER HPOS ON CHART
	*=*+1
HYVPOS		; CURSOR VPOS ON CHART
	*=*+1
HYHPOS		; CURCOR HPOS ON CHART
	*=*+1
QUADRT		; QUADRANT STAR RAIDER IS IN
	*=*+1
HYPENG		; HYPERWARP ENERGY USED
	*=*+1
HYPQAD			; HYPERWARP QUADRANT
	*=*+1
KILBAS		; QUAD OF STARBASE, ZYLONS ARE AFTER
	*=*+1
KILOCH		; KILL LOC HPOS
	*=*+1
KILOCV			; KILL LOC VPOS
	*=*+1
JMPPTS			; GRADIENT VALUES
	*=*+9
JMPOUT		; JUMP TIMEOUT REG
	*=*+1
;		**************************************************
;	*******************  SCREEN MAP DRAWING RAM  ******************
HTARGT		; HORIZ TARGET POSIT
	*=*+1
VTARGT			; VERT TARGET POSIT
	*=*+1
TARPTR		; TARGET SEQUENCER
	*=*+1
LOKFLG			; COMPUTER LOCKON
	*=*+1
NUMPTS		; NUMBER OF POINTS TO DRAW
	*=*+1
VDRAW		; VERT POS OF DRAW CURSOR
	*=*+1
HDRAW		; HOR POS OF DRAW CURSOR
	*=*+1
;	*********************************************************
;	******************  THINK RAM  **************************
ZYTOGG		; WHICH ZYLON
	*=*+1
SEQEN			; SEQUENCER PNTR RAM
	*=*+2
SEQTIM			; SEQUENCER TIMEOUT RAM
	*=*+2
XINDES			; DESIRED XINCRE
	*=*+2
YINDES			; DESIRED YINCRE
	*=*+2
ZINDES			; DESIRED ZINCRE
	*=*+2
XINPRS		;  PRESENT POINTER TO ZYWARP
	*=*+6
BSTRAF		; STRAF BACK 0,OR 1
	*=*+2
ROTTIM		; ROTATION TIMEOUT
	*=*+4
PHEXWT			; PHOTON EXPLOSION WAIT
	*=*+1
ATTARG	; WHICH ZYLON FIRED
	*=*+1
;	************************************************************
;	*************************  HYPERWARP RAM  *********************
HFLAG		; HYPERWARP ENGAGED FLAG, 00,FF, OR 7F
	*=*+1
HISPED		; HI BYTE SPEED, 0 OR 2=HWARP
	*=*+1
HTIMER			; HWARP TIMER
	*=*+1
HPNTR		; POINTS TO WHICH LINE STARS TO LOAD
	*=*+1
HSTEER		; OLD HWAR CURSOR HPOS
	*=*+1
VSTEER			; OLD HWARP CURSOR VPO
	*=*+1
STERMK			; STEER MASK
	*=*+1
JMPMSK	; INIT TARGETS IN NEW QUAD, MAX DISTANCE FROM SHIP
	*=*+1
;	*************************************************************
;	*******************  KEYS, JOYSTICK RAM *********************
HORJOY			; 0=NO HORIZ, 01=RIGHT, FF=LEFT
	*=*+1
VERJOY			; 0=NO VERT, 01=DOWN, FF=UP
	*=*+1
THEKEY		; THE KEY IN KBCODE
	*=*+1
RATING		; YOUR RATING
	*=*+2
ENDRAT		; FINAL RATING
	*=*+1
ENDCLS		; FINAL CLASS
	*=*+1
;	*************************************************************
;	***************  MESSAGE RAM  ****************************
MESTIM			; MESSAGE TIMEOUT
	*=*+1
DISFLG			; DISPLAY TYPE FLAG 0=FRONT,1=BACK,80=GALCHT
	*=*+1		; 40=SECTOR SCAN
SENPTR			; SENTENCE POINTER
	*=*+1
;	*************************************************************
;	***************  AUDIO RAM  ******************************
NOTSEQ		; NOTE POINTER
	*=*+1
REPSEQ			; HOW MANY TIMES TO REPEAT
	*=*+1
NDURAT			; DURAT OF NOTE
	*=*+1
SDURAT			; DURAT OF SPACE
	*=*+1
NPRIOR			; PRIOR OF NOE TYPE
	*=*+1
REPPTR			; WHERE TO REPEAT IN NOTETB
	*=*+1
NDURTM			; NOTE TIMER
	*=*+1
NOTVOL			; NOTE VOLUME
	*=*+1
PHOREP			; REPEAT NOTE FOR PHOTON
	*=*+1
AUDEXP			; EXPLOS SERVICE TIMER
	*=*+1
ATYPE2		; RAM FO AUDC2
	*=*+1
ATYPE3			; RAM FOR AUDC3
	*=*+1
AFREQ1			; RAM FO AUDF1
	*=*+1
AFREQ2			; RAM FOR AUDF2
	*=*+1
AUDADD			; HOW MUCH TO ADD
	*=*+1
AUDTIM		; AUDIO TIMEOUT  0=ALL DONE
	*=*+1
EXPDEL			; EXPLOS DELAY
	*=*+1
BIGEXP			; SHIELDS DOWN EXPLOS
	*=*+1
;	***********************************************************
;	***************  OBJECT RAM  ******************************
GRAPH		; GRAPHIC FOR OBJO-4
	*=*+5
STFLAG		; 0=OBJECT NOT ON (DEFINED IN THINK, OR PHOTON)
	*=*+5
;	**************************************************************
;	******************  COLOR RAM  ****************************
COLRAM		; PLAYER AND PLAYFIELD COLOR RAM
	*=*+14
;	**********************************************************
PHASE4
;

;
;	ADDRESS SPACE
;
;
;	COLLEEN MNEMONICS
;
POKEY	=	$D200
POT0	=	POKEY+0
POT1	=	POKEY+1
POT2	=	POKEY+2
POT3	=	POKEY+3
POT4	=	POKEY+4
POT5	=	POKEY+5
POT6	=	POKEY+6
POT7	=	POKEY+7
ALLPOT	=	POKEY+8
KBCODE	=	POKEY+9
RANDOM	=	POKEY+10
SERIN	=	POKEY+13
IRQST	=	POKEY+14
SKSTAT	=	POKEY+15
AUDF1	=	POKEY+0
AUDC1	=	POKEY+1
AUDF2	=	POKEY+2
AUDC2	=	POKEY+3
AUDF3	=	POKEY+4
AUDC3	=	POKEY+5
AUDF4	=	POKEY+6
AUDC4	=	POKEY+7
AUDCTL	=	POKEY+8
STIMER	=	POKEY+9
SKRES	=	POKET+10
POTGO	=	POKEY+11
SEROUT	=	POKEY+13
IRQEN	=	POKEY+14
SKCTL	=	POKEY+15
;
CTIA	=	$D000
HPOSP0	=	CTIA+0
HPOSP1	=	CTIA+1
HPOSP2	=	CTIA+2
HPOSP3	=	CTIA+3
HPOSM0	=	CTIA+4
HPOSM1	=	CTIA+5
HPOSM2	=	CTIA+6
HPOSM3	=	CTIA+7
SIZEP0	=	CTIA+8
SIZEP1	=	CTIA+9
SIZEP2	=	CTIA+10
SIZEP3	=	CTIA+11
SIZEM	=	CTIA+12
GRAFP0	=	CTIA+13
GRAFP1	=	CTIA+14
GRAFP2	=	CTIA+15
GRAFP3	=	CTIA+16
GRAFM	=	CTIA+17
COLPM0	=	CTIA+18
COLPM1	=	CTIA+19
COLPM2	=	CTIA+20
COLPM3	=	CTIA+21
COLPF0	=	CTIA+22
COLPF1	=	CTIA+23
COLPF2	=	CTIA+24
COLPF3	=	CTIA+25
COLBK	=	CTIA+26
PRIOR	=	CTIA+27
VDELAY	=	CTIA+28
GRACTL	=	CTIA+29
HITCLR	=	CTIA+30
CONSOL	=	CTIA+31
M0PF	=	CTIA+0
M1PF	=	CTIA+1
M2PF	=	CTIA+2
M3PF	=	CTIA+3
P0PF	=	CTIA+4
P1PF	=	CTIA+5
P2PF	=	CTIA+6
P3PF	=	CTIA+7
M0PL	=	CTIA+8
M1PL	=	CTIA+9
M2PL	=	CTIA+10
M3PL	=	CTIA+11
P0PL	=	CTIA+12
P1PL	=	CTIA+13
P2PL	=	CTIA+14
P3PL	=	CTIA+15
TRIG0	=	CTIA+16
TRIG1	=	CTIA+17
TRIG2	=	CTIA+18
TRIG3	=	CTIA+19
;
ANTIC	=	$D400
DMACTL	=	ANTIC+0
CHACTL	=	ANTIC+1
DLISTL	=	ANTIC+2
DLISTH	=	ANTIC+3
HSCROL	=	ANTIC+4
VSCROL	=	ANTIC+5
PMBASE	=	ANTIC+7
CHBASE	=	ANTIC+9
WSYNC	=	ANTIC+10
VCOUNT	=	ANTIC+11
PENH	=	ANTIC+12
PENV	=	ANTIC+13
NMIEN	=	ANTIC+14
NMIRES	=	ANTIC+15
NMIST	=	ANTIC+15
PIA	=	$D300
PORTA	=	PIA+0
PORTB	=	PIA+1
PACTL	=	PIA+2
PBCTL	=	PIA+3
;
;		OPERATING SYSTEM
;
VIMIRQ	=	$0216		; IMMEDITATE IRQ LOCATION
VVBLKI	=	$0222		; IMMEDIATE VERT BLANK NMI VECTOR
VDSLST	=	$0200		; DISPLAY LIST NMI VECTOR
ALPHA	=	$E000
;

;			EQUATES
	DISPL1	=	DISPLY+2		; LDISP
	DISPL2	=	DISPLY+15		; LDISP
	DISPL3	=	DISPLY+95		; LDISP
	DISTOP	=	$7C		; LDISP SUB
	VOFLOW	=	50
	VSTCEN	=	50
	VOBCEN	=	$7A
	HOFLOW	=	80
	HSTCEN	=	80
	HOBCEN	=	$7D
	SCPTAB	=	81		; FOR LOADING PTAB
	SBCD	=	100		; FOR LOADING BCDCON
	SCVCON	=	40		; FOR LOADING VCON TABLES
	ICON1	=	$1D40
	ICON2	=	$1BFE
	HORCHT	=	$3D		; HOR EDGE OF CHART
	VERCHT	=	$3F		; VERT EDGE OF CHART
	STRNUM	=	12		; NUMBER OF STARS DISPLAYED
	OBJNUM	=	5		; NUMBER OF OBJECTS
	EXPNUM	=	32		; NUMBER OF EXPLOSION STARS
	RAMNUM	=	OBJNUM+STRNUM+EXPNUM	; TOTAL NUMBER OF RAM LOC.
	OBLAST	=	OBJNUM-1	; RAM LOC OF LAST OBJECT
	RMLAST	=	RAMNUM-1	; RAM LOC OF LAST STAR IN EXPLOSION
	STLAST	=	OBJNUM+STRNUM-1	; RAM LOC OF LAST STAR IN REAL STRS
	OBPHOT	=	OBJNUM-3	; LAST PHOTON LOCATION
	OBCOMP	=	OBJNUM-2	; LAST PHOTON WHIC COULD BE COMP CONT.
	INSET	=	$1B36		; IST BYTE OF INSET
	VMAX	=	100
	HMAX	=	160		; MAX HORIZ STAR POSITION DISPLAYED
;
	DBLUE	=	$A0		; DARK BLUE
	RED	=	$44		; COLOR
	LTBLUE	=	$92		; COLOR
	BRTBLU	=	$AF		; COLOR
	BRTRED	=	$4F		; COLOR
	DRKRED	=	$60		; COLO
	DIMRED	=	$42		; COLOR
	DIMBLU	=	$90		; COLOR
	YELLOW	=	$26		; COLOR
	DIM	=	$55		; MEMMAP CODE FOR DIM STAR
	MED	=	$AA
	BRT	=	$FF
	IRQMSK	=	$40		; KEY INTERRUPT MASK
	NOSTAR	=	$17E3		; NO STAR DUING ATRACT
;
;
;		CHARACTER GRAPHICS
	*=$A000
;
;
CGRAPH
C0	.BYTE	00,$7F,$47,$47,$47,$47,$47,$7F


C1	.BYTE	00,$30,$10,$10,$10,$38,$38,$38


C2	.BYTE	00,$78,$08,$08,$78,$40,$40,$78


C3	.BYTE	00,$78,$08,$08,$7C,$0C,$0C,$7C


C4	.BYTE	00,$60,$60,$60,$6C,$7C,$0C,$0C


C5	.BYTE	00,$78,$40$,40,$78,$08,$08,$78


C6	.BYTE	00,$78,$48,$40,$40,$7E,$42,$7E


C7	.BYTE	00,$7C,$44,$04,$1C,$10,$10,$10


C8	.BYTE	00,$38,$28,$28,$7C,$6C,$6C,$7C


C9	.BYTE	00,$7C,$44,$44,$7C,$0C,$0C,$0C


CBLK	.BYTE	0,0,0,0,0,0,0,0


CEQ	.BYTE	$38,$38,$38,$00,$00,$38,$38,$38


CQCBLK	.BYTE	$80,$80,$80,$80,$80,$80,$80,$FF


CE	.BYTE	$00,$3C,$20,$20,$78,$60,$60,$7C


CINF	.BYTE	$00,$66,$99,$99,$99,$66,$00,$00


CMINUS	.BYTE	$00,$00,$00,$7E,$00,$00,$00,$00


CPLUS	.BYTE	$00,$18,$18,$7E,$18,$18,$18


CPHI	.BYTE	$00,$18,$7E,$DB,$99,$DB,$7E,$18


CV	.BYTE	$66,$66,$66,$66,$66,$2C,$38,$30


CRHO	.BYTE	0,$7C,$44,$44,$7C,$68,$6C,$6C


CTETA	.BYTE	$00,$1C,$3E,$63,$5D,$63,$3E,$1C


CK	.BYTE	$00,$46,$46,$44,$7C,$64,$66,$66


CT	.BYTE	$FE,$92,$10,$18,$18,$18,$18,$18


CC	.BYTE	$FC,$8C,$8C,$80,$80,$80,$84,$FC


CHLINE	.BYTE	0,0,0,0,0,0,0,$FF


CVLINE		.BYTE	$80,$80,$80,$80,$80,$80,$80,$80


CDOT		.BYTE	0,0,0,0,0,0,0,$80


CSBASE		.BYTE	$80,$AA,$9C,$BE,$9C,$AA,$80,$FF


CZY2		.BYTE	$80,$98,$90,$B6,$B0,$BC,$80,$FF


CZY1		.BYTE	$80,$8E,$80,$B8,$80,$9C,$80,$FF


CZY3		.BYTE	$80,$B0,$98,$BE,$98,$B0,$80,$FF


;
;
SESCAN
	 .BYTE	 0,0,$6C,$6F,$6E,$67,0,$72,$61,$6E,$67,$65,0,$73,$63,$61,$6E





BACKUP
	 .BYTE	 0,0,0,0,0,0,$61,$66,$74,0,$76,$69,$65,$77,0,0,0





;
GALCHT
	 .BYTE 0,0
	 .BYTE	 0,$67,$61,$6C,$61,$63,$74,$69,$63,0,$63,$68,$61,$72,$74,0





	 .BYTE	 0,0
;
;
;
GLDISP		 ; GAL CHT DISPLAY LIST
	 .BYTE	 $60,$46
	 .WORD	 GALCHT
	 .BYTE	 $F0,$47
	 .WORD	 CHTDIS
	 .BYTE	 7,7,7,7,7,7,7,7$80,$46



	 .WORD	 MESAGE
	 .BYTE	 $46
	 .WORD	 DGALAC
	 .BYTE	 6,6,$41
	 .WORD	 DISPLY
;
;
PHASE8
;
;
;		INIT SECTION
;
INIT
	LDA	#$00
	STA	SKCTL
	STA	TIMOUT		; RESET TIMEOUT
	STA	MISDIF		; MISSIONDIFFICULTY
	STA	RESET		; ONE SHOT CONSOL
	LDA	#$03
	STA	SKCTL		; TURN POKEY ON
;
INIT3		; GAME SELECT, RESTART POINT  ****************************
	LDY	#SENATA-SENTAB
;
INIT4		; ATTRACT MODE RESTART POINT  **************************
	LDA	#$FF		; GAME OVER
;
INIT1		; GAME START RESTART POINT  ************************
	STY	REPMSG
	STA	ATRACT
;	CLEAR I/O
	LDA	#$00
	TAX
INIT2
	STA	CTIA,X
	STA	ANTIC,X
	CPX	#$0F		; DONT RESET POKEY
	BCS	INIT5
	STA	POKEY,X
INIT5
	STA	PIA,X
	.BYTE	$9D		; STA ABS,X
	.WORD	PAGE0		; STA PAGE0,X  (ABSOLUTE)
	INX
	BNE INIT2
;			I/O CLEARED
;
;
	DEX		; X=FF
	TXS		; LOAD STACK PNTR
	CLD
;
	LDA	#RAMMAP/256
	JSR	CLRMP1		; CLEAR ALL RAM
;		LD VECTOR RAM
	LDA	#IRQVEC
	STA	VIMIRQ
	LDA	#IRQVEC/256
	STA	VIMIRQ+1
	LDA	#VBNMI
	STA	VVBLKI
	LDA	#DISNMI
	STA	VDSLST
	LDA	#VBNMI/256
	STA	VVBLKI+1
	LDA	#DISNMI/256
	STA	VDSLST+1
;
;

;			CONFIGURE PIA
;
	LDA	#$04
	STA	PACTL		; TURN ON JOYSTICK
;
;
;
;
;		CONFIGURE CTIA
;
	LDA	#$11
	STA	PRIOR
;
	LDA	#$03
	STA	GRACTL
;
	JSR	LDTABS		; INIT TABLES
;
;
;			INIT DISPLAY LIST
	LDX	#$0A		; KEY F, FRONT DISPLAY
	JSR	KEYS15		; INIT FRONT VIEW
	LDA	ATRACT
	AND	#$80
	TAY
	LDX	#DISPL3-DISPLY
	LDA	#$08
	JSR	LDISP		; SHIP ALIVE OR DEAD
;
	LDA	#$20
	STA	WARP		; WARP 5 SPEED
;
;
;			CONFIGURE ANTIC
;
	LDA	#DISPLY
	STA	DLISTL
	LDA	#DISPLY/256
	STA	DLISTH
	LDA	#$3E
	STA	DMACTL		; DMA ON
;
	LDA	#PGRAPH-$0300/256
	STA	PMBASE			; LD PLAYER / MISSLE BASE
;
;
;
;
;		INIT NUMBER OF STARS
	LDA	#STLAST
	STA	NSTARS
;
;
	LDX	MISDIF		; GAME TYPE MESSAGE
	LDY	MSENTB,X
	JSR	LDMESS
;
;
;
;
;
;		ENABLE INTERRUPTS
	LDA	#IRQMSK
	STA	IRQEN
	CLI		; IRQS READY
	LDA	#$C0
	STA	NMIEN		; NMIS READY
;
;		END INIT
;
	;		MAIN PROGRAM
MAIN
;
;		MAIN FLOW CHART
;	START
;		WAIT FOR VBLANK				
;		CLEAR AND LOAD STARS/OBJECTS		
;		MOVE ROUTINES				
;		PLAYER INTERFACE SECTION		GAME ON ONLY
;		SERVICE SECTION				GAME ON ONLY
;		HIT DETECT				GAME ON ONLY
;		SERVICE CONTINUOUS RUNNING ROUTINES
;	JUMP TO START
;
;
	LDA	PROGST
	BEQ	MAIN			 ; WAIT FOR VBLANK NMI
	LDA	#$00			 ; RESET VBLANK STATUS REGISTER
	STA	PROGST
;
;
;
;
;
;		UPDATE MEMORY MAP RAM AND PLAYERS RAM
;
;		CLRSTR
;		CLEAR STAR ROUTINE
	LDA	CNSTAR		; THIS FLAGS SAYS OLDPS NOT DEFINED IF=00
	BEQ	CLRSR2
	LDX	#OBLAST		; LAST LOCATION OF OBJECT IN RAM
CLRSR1
	INX
	LDY	OLDVER,X
	LDA	VCONL,Y
	STA	PNTR
	LDA	VCONH,Y
	STA	PNTR+1
	LDY	OLDHOR,X
	LDA	OLDBYT,X
	STA	(PNTR),Y	; BYTE RESTORED
	CPX	CNSTAR
	BCC	CLRSR1
	LDA	#$00
	STA	CNSTAR		; STARS CLEARED
CLRSR2
;
;
;		STOSTR
;
;	STORE STAR IN RAM MAP ROUTINE
;
	LDA	HFLAG		; IN HYPER JUMP  ?
	BMI	STOSR1			; YES , NO STORE.
;
;
;
	LDX	NSTARS	; LAST BYTE OF STAR RAM TO STORE
	STX	CNSTAR		; STARS POINTERS DEFINED OK TO CLEAR NOW
STOSR2

;
	LDA	VPOS,X
	STA	OLDVER,X
	TAY
	LDA	VCONL,Y
	STA	PNTR
	LDA	VCONH,Y
	STA	PNTR+1
	LDA	HPOS,X
	LSR	A
	LSR	A
	STA	OLDHOR,X
	TAY
	LDA	(PNTR),Y
	STA	OLDBYT,X		; BYTE SAVED
	ORA	STRBYT,X
	STA	(PNTR),Y
;
	DEX
	CPX	#OBLAST
	BNE	STOSR2		; DO NEXT STAR
STOSR1
	LDA	TIMOUT
	BPL	STOSR3
	LDA	#$00
	STA	NOSTAR
	STA	NOSTAR+1
	STA	NOSTAR-39
	STA	NOSTAR-40
STOSR3
;
;
;		CLROBJ
;		CLEAR OBJECT RAM
;	OBJECT 4
	LDA	#$00
	LDY	OLDVER+4
	LDX	OLDNUM+4
CLROB1
	STA	MGRAPH,Y
	INY
	DEX
	BPL	CLROB1
;		OBJECT 3
	LDY	OLDVER+3
	LDX	OLDNUM+3
CLROB2
	STA	PGRAP3,Y
	INY
	DEX
	BPL	CLROB2
;		OBJECT 2
	LDY	OLDVER+2
	LDX	OLDNUM+2
CLROB3
	STA	PGRAP2,Y
	INY
	DEX
	BPL	CLROB3
;		OBJECT 1
	LDY	OLDVER+1
	LDX	OLDNUM+1
CLROB4
	ATS	PGRAP1,Y
	INY
	DEX
	BPL	CLROB4
;		OBJECT 0
	LDX	OLDVER+0
	LDX	OLDNUM+0
CLROB5
	STA	PGRAP0,Y
	INY
	DEX
	BPL	CLROB5
;
;

;		STOOBJ
;		STORE OBJECT ROUTINE
;
;	OBJECT 4, ALWAYS PHOTON, OR DOCKING OBJECT
	LDA	GINDEX+4
	CMP	#$01		; DEFINE CARRY
	LDY	GRAPH+4
	LDX	VPOS+4
	STX	OLDVER+4
	LDA	NUMBYT+4
	STA	TEMP
	STA	OLDNUM+4
STOOB1
	LDA	PHGRAF,Y
	BCS	STOOB8
	AND	RANDOM
STOOB8
	STA	MGRAPH,X
	INY
	INX
	DEC	TEMP
	BPL	STOOB1
;	OBJECT 3 , ALWAYS PHOTON
	LDA	GINDEX+3
	CMP	#$01
	LDY	GRAPH+3
	LDX	VPOS+3
	STX	OLDVER+3
	LDA	NUMBYT+3
	STA	TEMP
	STA	OLDNUM+3
STOOB2
	LDA	PHGRAF,Y
	BCS	STOOB9
	AND	RANDOM
STOOB9
	STA	PGRAP3,X
	INX
	INY
	DEC	TEMP
	BPL	STOOB2
;	OBJECT 2, (VARIABLE GRAPHIC)
	LDA	GINDEX+2
	CMP	#$01		; DEFINE CARRY
	LDY	GRAPH+2
	LDX	VPOS+2
	STX	OLDVER+2
	LDA	NUMBYT+2
	STA	TEMP
	STA	OLDNUM+2
STOOB3
	LDA	PHGRAF,Y
	BCS	STOOB7
	AND 	RANDOM
STOOB7
	STA	PGRAP2,X
	INX
	INY
	DEC	TEMP
	BPL	STOOB3
;		OBJECT 1 (VARIABLE)
	LDY	GRAPH+1
	LDX	VPOS+1
	STX	OLDVER+1
	LDA	NUMBYT+1
	STA	TEMP
	STA	OLDNUM+1
STOOB5
	LDA	ZYGRAP,Y
	STA	PGRAP1,X
	INX
	INY
	DEC	TEMP
	BPL	STOOB5
;			OBJECT 0 (VARIABLE)
	LDY	GRAPH+0
	LDX	VPOS+0
	STX	OLDVER+0
	LDA	NUMBYT+0
	STA	TEMP
	STA	OLDNUM+0
STOOB6
	LDA	ZYGRAF,Y
	STA	PGRAP0,X
	INX
	INY
	DEC	TEMP
	BPL	STOOB6
;
;		UPDATE HORIZ
;
	LDA	HPOS+0
	STA	HPOSP0+0
	LDA	HPOS+1
	STA	HPOSP0+1
	LDA	HPOS+2
	STA	HPOSP0+2
	LDA	HPOS+3
	STA	HPOSP0+3
	LDA	HPOS+4
	STA	HPOSP0+7
	CLC
	ADC	#$02
	STA	HPOSP0+6
	ADC	#$02
	STA	HPOSP0+5
	ADC	#$02
	STA	HPOSP0+4

;
;		END UPDATE MEMORY MAP RAM AND PLAYERS RAM
;
;
;
;
;	STARS/OBJECTS MOVE ROUTINES
	BIT	DISFLG
	BMI	MAINI		; NO ROTATE IN GALACTIC CHART
;
;		YROTAT
;		ROTATE ALL LEFT AND RIGHT
	LDA	HORJOY		; HORIZ JOYSTICK ?
	BEG	YROTA1		; NO
	STA	TEMP3
	LDY	NSTARS		; LAST BYTE OF STARS
YROTA2
	STY	TEMP4		; TEMP STORE
	CLC
	TYA
	TAX
	ADC	#RAMNUM		; YPOS
	TAY
	JSR	ROHELP
	TYA
	TAX
	LDY	TEMP4
	JSR	ROHELP
	DEY
	BPL	YROTA2
YROTA1
;
;
;
;		ZROTAT
;		ROTATE ALL UP AND DOWN
	LDA	VERJOY		; VERT JOYSTICK ?
	BEQ	ZROTA1		; NO
	STA	TEMP3
	LDY	NSTARS
ZROTA2
	STY	TEMP4
	CLC
	TYA
	TAX
	ADC	#RAMNUM*2		; ZOPS
	TAY
	JSR	ROHELP
	TYA
	TAX
	LDY	TEMP4
	JSR	ROHELP
	DEY
	BPL	ZROTA2
ZROTA1
;
;
MAIN1
;		XMOVER
;		UPDATE ALL XPOS DUE TO FORWARD SHIP MOTION
;		SUBTRACT SPEED FROM XPOS
	LDX	NSTARS		; X=INDEX TO STARS/POBJECT TO UPDATE
XMOVE1
	CPX	#OBJNUM		; PHOTONS ?
	BCS	XMOVE2		; NO.
	LDA	GINDEX,X
	BEQ	XMOVE3
XMOVE2
	SEC
	LDA	XPOSL,X
	SBC	SPEED
	STA	XPOSL,X
	LDA	XPOSH,X
	SBC	HISPED
	STA	XPOSH,X
	LDA	XSIGN,X
	SBC	#$00		; CARRY ONLY
	STA	XSIGN,X
XMOVE3
	DEX
	BPL	XMOVE1		; NEXT STAR
;		ALL DONE
;
;

;		MOTION
;	OTHER MOTION SUCH AS DUE TO ZYLON SHIP POWER
;	                                OR PHOTONS
;	XINCRE,YINCRE,ZINCRE ARE ALL SIGN-MAGNITUDE TYPES
	LDX	NSTARS
MOTIN1
	CPX	#STLAST		; REG STARS ?
	BNE	MOTIN9		; NO
	LDX	#OBLAST		; LAST OBJ
MOTIN9
	TXA
MOTIN2
	TAY
	LDA	#$00
	STA	TEMP1
	LDA	XINCRE,Y
	BPL	MOTIN3
	EOR	#$7F
	CLC
	ADC	#$01
	BCS	MOTIN3
MOTIN3
	CLC
	ADC	XPOSL,Y
	STA	XPOSL,Y
	LDA	XPOSH,Y
	ADC	TEMP1
	STA	XPOSH,Y
	LDA	XSIGN,Y
	ADC	TEMP1
	STA	XSIGN,Y
;
	TYA
	CLC
	ADC	#RAMNUM
	CMP	#RMLAST*3	; ALL DONE ?
	BCC	MOTIN2		; NO
	DEX
	BPL	MOTIN1		; NEXT STAR OR OBJECT
;
;

;		BOUNDS
;
	LDY	#OBLAST		; ONLY OBJECTS
BOUND1
	TYA
	TAX
	LDA	#$02
	STA	TEMP
BOUND3
	LDA	XSIGN,X
	CMP	#$02
	BCC	BOUND4
;		OUT OF BOUNDS
	ASL	A
	LDA	#$00
	STA	XSIGN,X
	BCS	BOUND5
	INC	XSIGN,X
	EOR	#$FF
BOUND5
	STA	XPOSH,X
BOUND4
	TXA
	CLC
	ADC	#RAMNUM
	TAX
	DEC	TEMP
	BPL	BOUND3
	DEY
	BPL	BOUND1		; NEXT STAR
;
;

;		CALCVH
;	CALCULATE V,H POS FOR ALL STARS/OBJ
	LDA	DISFLG
	CMP	#$02
	BCS	CALC14		; NOT FRONT OR BACK
;
	LDX	NSTARS		; X=INDEX OF STARS
CALCV1			;STAR LOOP
	LDA	#$FF
	LDY	XSIGN,X
	CPY	DISFLG
	BEQ	CALCV5
;
;	UPDATE VPOS
;
	LDA	ZSIGN,X		; 2'S COMPLE ZOPS?
	BNE	CALCV8		; NO
;			2'S COMPLEMENT
	SEC
	LDA	#$00
	SBC	ZPOSL,X
	STA	TEMP
	LDA	#$00
	SBC	ZPOSH,X
	STA	TEMP1
	JMP	CALCV9
CALCV8
	LDA	ZPOSL,X
	STA	TEMP		; STORE IN TOP REG
	LDA	ZPOSH,X
	STA	TEMP1
CALCV9
	JSR	DIVIDE		; DIVIDE ZPOS BY XPOS
	JSR	STVPOS		; STOE VPO
;
;			UPDATE HORIZ POS
;
;
	LDA	YSIGN,X		; 2'S COMPLE YPOS ?
	BNE	CALCV3		; NO.
;		2'S COMPLEMENT
	SEC
	LDA	#$00
	SBC	YPOSL,X
	STA	TEMP		; STORE IN TOP(NUMERATOR)REG
	LDA	#$00
	SBC	YPOSL,X
	STA	TEMP1
	JMP	CALCV4
CALCV3
	LDA	YPOSL,X		; SOTRE IN TOP REG
	STA	TEMP
	LDA	YPOSK,X
	STA	TEMP1
CALCV4
	JSR	DIVIDE		; DIVIDE YPOS BY XPOS
CALCV5
	JSR	SHTPOS		;	STORE HPOS
;
	DEX
	BPL	CALCV1		; NEXT STAR
;		ALL DONE
CALC14
;
;

	JSR	CSERVE		; SERVICE GALACTIC CHART
;
;
;	SSERVE
;		SECTOR SCAN SERVE
	BIT	DISFL0
	BVC	SSERV1
	LDX	#INSTB2-INSTAB		; LOAD SECTOR SCAN SHIP
	JSR	LDINST
	BIT	DAMAGE+4		; SECTOR SCAN DAMAGE
	BVS	SSERV1
;
	LDX	NSTARS
SSERV2
	LDA	XPOSH,X
	LDY	XSIGN,X
	BNE	SSERV3
	EOR	#$FF
SSERV3
	TAY
;
	LDA	PTAB,Y
	JSR	STVPOS
	LDA	YPOSH,X
	LDY	YSIGN,X
	BNE	SSERV4
	EOR	#$FF
SSERV4
	TAY
;
	LDA	PTAB,Y
	JSR	STHPOS
	DEX
	BPL	SSERV2
SSERV1
;
;

;		OBJCOL
;		SELECT OBJECT COLOR , GRAPHIC
	LDX	#OBLAST+1
OBJCL2		; OBJCT LOOP
	DEX
	BPL	OBJCL1
	JMP	OBJC12
OBJCL1
	LDA	#$00
	STA	GRAPH,X		; SET GRAPH PNTR TO NULL GRAPHIC
	STA	NUMBYT,X		; STORE 1 BYTE ONLY
	BIT	DISFLG		; GALACTIC CHART ?
	BPL	OBJCL3		; NO
	CPX	#$03		; OBJ 0,1,2 ?
	BCC	OBJCL2		; YES , NO DISPLAY
OBJCL4
	LDA	RANDOM		; RANDOM COLOR
	LDY	#$F2		; SMALL SIZE
	BMI	OBJCL6		; JMP
     	OBJCL3
	CMP	STFLAG,X		; OBJECT ON ?
	BEQ	OBJCL2			; NO
	BVS	OBJCL4		; SECTOR SCAN
	LDY	XPOSH,X		; INTENSITY AND GRAPHIC SIZE
	BIT	BASFLG		; STARBASE ?
	BVC	OBJCL6		; NO
	CPX	#$02		; SBASE OBJECTS ?
	BCS OBJCL8		; NO
	LDA	HPOS+2		; GANG OBJ 0,1,2 TOGETHER
	CLC			; OBJ 2 IS REFERENCE
	ADC	BHORTB,X	; HORIZ OFFSET , +8,-8
	STA	HPOS,X
	LDA	VPOS+2		; GANG VPOS
	CLC
	ADC	#4
	STA	VPOS,X
	LDY	XPOSH+2		; ALL USE OBJ2 POSIT.
OBJCL8
	LDA	BINTIM		; MODULATE STARBASE COLOR
	AND	#$0F
OBJCL6
	STA	TEMP1		; COLOR MODULATE
	TYA			; XPOSH
	LDY	VPOS,X		; IN BOUNDS CHECK
	CPY	#$CC		; IN BOUNDS ?
	BCS	OBJCL2		; NO
	LDY	DISFLG		; FRONT OR BACK ?
	BEQ	OBJCL7		; FRONT
	EOR	#$FF		; ONES COMPLEMENT XPOSH
OBJCL7
	CMP	#$20		; TOO FAR AWAY ?
	BCS OBJCL2		; YES
	CMP	#$10		; SMALLEST SIZE ?
	BCC	OBJCL5		; NO
	LDA	#$0F		; SMALL SIZE
OBJCL5				; LD COLOR, GRAPHIC PNTRS
	STA TEMP		; TEMP SAVE XPOSH
	ORA GINDEX,X			; TYPE OF GRAPHIC
	LSR	A		; ONLY 8 VALUES PER TYPE
	TAY
	LDA	GPOINT,Y		; OFFSET FROM PHGRAF, OR ZYGRAF
	STA	GRAPH,X		; HOLDS INDEX
	LDA	NBYTAB,Y
	STA	NUMBYT,X		; NUMBER OF BYTES TO SAVE
	TYA
	LSR	A
	LSR	A
	LSR	A
	TAY			; GINDEX ONLY
	LDA	COLTAB,Y		; CHROMA OF OBJ
	CPY	#$08		; BASE STAR ?
	BNE	OBJC11		; NO
	EOR	RANDOM		; RANDOM COLOR
OBJC11
	LDY	TEMP		; DISTANCE FOR INTENSITY
	EOR	COLINT,Y	; INTENSITY
	EOR	TEMP1		; COLOR MODULATE , IF ANY
	LDY	CLINDX,X	; WHERE TO STORE
	STA	COLRAM,Y	; COLOR UPDATED
	JMP	OBJCL2		; NEXT OBJ
OBJC12

;		STRBRT
;		STAR BRIGHTNESS INTENSITY NEW STAR CALC
;
	LDY	#BRTBLU
	LDX	SPABAK
	LDA	REDFLG
	BEQ	STRBR2
	DEC	REDFLG		; TIME OUT RED ALERT
	LDY	#BRTRED
	AND	#$20
	BEQ	STRBR2
	LDX	#DIMRED
	LDY	#DRKRED
STRBR2
	STY	COLRAM+6		; PF2
	STX	COLRAM+8		; BAK
	LDX	NSTARS		; X=INDWX , INIT TO LAST STAR
STRBR1
	LDA	XPOSH,X		; INTENSITY DETERMINED BY XPOS
	LDY	DISFLG		; FRONT OR BACK  ?
	CPY	#$01		; ALL BUT BACK VIEW WILL BRANCH
	BNE	STRBR5		; FRONT
	CMP	#$F0		; STAR AT MINUS BOUNDS ?
	BCS	STRBR6
	JSR	NEWSTR
STRBR6
	EOR	#$FF		; COMPLEMENT XPOS
STRBR5
	CMP	#$10		; USE DEFAULT ?
	BCC	STRBR4		; NO
	LDA	#$0F		; DEFAULT
STRBR4
	ASL	A
	AND	#$1C
	ORA	TIMERX			; MULTIPLEX	WITH FRAME OUNT
	TAY				; FOR 8 APPARENT LEVELS OF BRIGHT
	LDY	BRTABL,Y		; WHICH PLAYFIELD
	STA	TEMP
	LDA	HPOS,X
	AND	#$03
	TAY
	LDA	MASK,Y
	AND	TEMP
	STA	STRBYT,X		; DATA TO STORE IN STOSTR
	DEX
	CPX	#OBJNUM			; ALL DONE WITH STARS ?
	BCS	STRBR1			; NEXT STAR
	;		ALL DONE

;
;	END STAR/OBJECTS MOVE ROUTINES
;
;
;
;	GAME ON ROUTINES
;		PLAYER INTERFACE SECTION AND SERVICE SECTION, HIT DETECT
;
	BIT	ATRACT		; GAME OVER LOCKOUT PLAYER
	BVC	MAIN4		; YES
	JMP	MAIN3
MAIN4
;
	JSR	KEYSRV		; SERVICE JEYBOARD
;		JOYSTK
;		JOYSTICK EVALUATION ROUTINE
	LDA	PROTA
	TAY		; STORE TEMP
	AND	#$03		; VERT ONLY
	TAX
	LDA	JOYTAB,X		; CODE FOR VERT
	STA	VERJOY
	TYA		; PORT A AGAIN
	LSR	A
	LSR	A
	AND	#$03
	TAX			; HORIZ ONLY
	LDA	JOYTAB,X		; CODE FOR HORIZ
	STA	HORJOY

	JSR	HITZYL		; HIT ZYLON
	JSR	PHOTON		; SERVICE TRIGGERS
;		ASERVER
;		ATTACK CPMPUTER SERVICE
	BIT	DAMAGE+3
	BVS	ASERV2
	LDA	ATENER		; ATTACK ON ?
	BEQ	ASERV2		; NO
	LDA	DISFLG
	BNE	ASERV1
	JSR	UPINST
ASERV1
;
;		AUTO TARGET SELECTOR
;
	LDX	DCSTOR
	LDA	ATTARG
	BMI	ASERV4
	TAX
	ORA	#$80
	STA	ATTARG
ASERV4
	LDA	STFLAG,X
	BNE	ASERV3
	TXA
	EOX	#$01
	TAX
	LDA	STFLAG,X
	BNE	ASERV3
	LDX	DCSTOR
ASERV3
	STX	DCSTOR
;
;		COMPUTER AUTO TRACKING
	LDA	TRKFLG
	BEQ	ASERV2
	LDA	DISFLG
	CMP	#$02		; FRONT OR BAK ?
	BCS	ASERV2		; NO
	EOR	#$01		; WHICH DISFLG
	CMP	XSIGN,X		; OBJ IN SIGHT ?
	BEQ	ASERV2		; YES
	TAX
	LDA	TRKTAB,X		; WHICH KEY FOR SWITCHING DISPLAY
	STA	THEKEY		; SWITCH DISPLAY
ASERV2
;

	JSR	BSERVE		; SERVICE STARBASE
	JSR	THINK		; SERVICE ZYLON BRAIL
;		HITSHP
;		RAIDER HIT PHOTON HIT DETECT
	LDA	BASFLG		; STARBASE ?
	BNE	HITSH1		; YES
	LDA	STFLAG+2
	BEQ	HITSH1
	LDY	XPOSH+2
	INY
	CPY	#$02
	BCS	HITSH1
	LDY	YPOSH+2
	INY
	CPY	#$02
	BCS	HITSH1
	LDY	ZPOSH+2
	INY
	CPY	#$02
	BCS	HITSH1
	;			A HIT !!
	JSR	DAMCTL
	LDY	#$02
	JSR	EXPLOS
	LDX	#$7F
	LDA	SPABAK		; DEAD ?
	BNE	HITSH2		; NO
	LDX	#$0A		; FRONT
	JSR	KEYS15
	LDY	#SENDST-SENTAB
	LDX	#$08		; DESTROYED
	JSR	CRATE
	LDX	#DISPL3-DISPLY
	LDY	#$80
	LDA	#$08
	JSR	LDISP
	JSR	CLRMAP
	LDX	#$40		; ITS ALL OVER
	STX	BIGEXP
	LDX	#$FF		; HIT ME DEAD
HITSH2
	STX	HITME
	LDA	#$00
	STA	STFLAG+2
	LDA	#$02
	STA	PHEXWT
;
	LDX	#$01
	JSR	PANDS6
	LDX	#NOITB1-NOISTB
	JSR	NOISE
HITSH1

;		END GAME ON ROUTINES

MAIN3
;
;
	;		CONTINOUS RUNNING ROUTINES
	;		CONSRV
	;		SERVICE CONSOL ROUTINE
	LDY	RESET
	LDA	CONSOL
	EOR	#$FF		; POSITIVE LOGIC
	AND	#$03
	STA	RESET
	BEQ	CONSR2
		DEY
	BPL	CONSR2
	STA	TIMOUT		; RESET TIMOUT
	CMP	#$02
	BCS	CONSR3		; GAME SELECT
	LDA	#$00
	TAY
	JMP	INIT1		; GAME START
CONSR3
	INC	MISDIF
	LDA	MISDIF
	AND	#$03
	STA	MISDIF
	JMP	INIT3
CONSR2
;
;

	JSR	PASDIN		; SERVICE PANEL DISPLAY
	JSR	HSERVE		; SERVICE HYPERWARP JUMP
	JSR	MSERVE		; SERVICE MESSAGE
	JSR	TIMERS		; EVALUATE ALL TIMERS , TIMEOUTS, ETC.
;		END CONTINOUS RUNNING ROUTINES
;
;
;
	JMP	MAIN		; END VBLANK ROUTINE, WAIT FOR NEW VBLANK
;
;
;
;
;		NMI INTERRUPT SERVICE SECTION
;
;
VBNMI
	LDA	#$FF
	STA	PROGST			; SET PROGST VBLANK NMI FLAG
	LDA	#ALPHA/256
	STA	CHBASE		; USE STANDARD ALPHA CHARACTERS
	LDX	COLRAM+8		; BAK
	LDA	RANDOM
	BIT	HTIME
	BVC	VBLNK4
	BMI	VBLNK1
	AND	#$72
	ORA	#$40
VBLNK1
	TAX
VBNLK4
	LDA	DISFLG
	CMP	#$03
	BCC	VBLNK2
	LDX	#DBLUE
VBLNK2
	STX	COLRAM+8		; BAK
;
	LDX	#$08
VBLNK3
	LDA	COLRAM+0,X
	STA	COLPM0,X
	DEX
	BPL	VBLNK3
;
;
	STA	HITCLR		; RESET HITS
;
	JSR	AUDIO		; SERVICE AUDIO
;
	INC	BINNMI		; ATRACT MODE STUFF
	BNE	VBLNK5
	LDA	TIMOUT
	BMI	VBLNK5
	INC	TIMOUT
	BPL	VBLNK5
	BPL	VBLNK5
	JMP	INIT4
	VBLNK5
;
;
	JMP	POPALL
;
DISNMI
	PHA		; PUSH ALL REGISTERS FOR OP SYSTEM
	TXA
	PHA
	TYA
	PHA
	LDA	#ALPHA/256
	LDY	VCOUNT
	CPY	#$60
	BEQ	DISNMI
	LDA	#CGRAPH/256
DISNM1
	STA	CHBASE		; USE FUTURE TYPE CHARACTER SET
;
	LDX	#$04
	STA	WSYNC
DISNM2
	LDA	COLRAM+9,X
	STA	COLPF0,X
	DEX
	BPL	DISNM2
;
;		READ HITS
	LDA	M0PL
	ORA	M1PL
	ORA	M2PL
	ORA	M3PL
	STA	PHITS+1		; PHOTON 3 STORED
	LDA	P3PL
	STA	PHITS+0		; PHOTON 2 STORED
POPALL
	PLA
	TAY
	PLA
	TAX
	PLA
;
;			END POP
;
	RTI
;
;
;
;
;
;		IRQ INTERRUPT SERVICE SECTION
;

;		PUSH ACCUM REGISTERS
	PHA
;			END PUSH
	LDA	#$00
	STA	IRQEN		; RESET IRQ'S
	LDA	#IRQMSK
	STA	IRQEN
	LDA	KBCODE
	ORA	#$C0
	STA	THEKEY
	PLA
	RTI
;
;			END IRQ INTERRUPT SECTION
;
;
;
;			SUBROUTINES,
;
;
;
LDINS6		; LOAD UP THE LINE
	STA	NUMPTS,Y
	INX
	DEY
	BPL	LDINS4
	JSR	DRAWER
LDINST
;		LOAD INSET	RESERVE BYTE=$FE
	;	X= INITIAL START OF PNTR IN INSTAB
	LDA	#$05
	STA	TARPTR		; DEFINE TARGET POINTER
	BIT	DAMAGE+3		; COMPUTER
	BVS	LDINS2
LDINS1
	LDY	#$02
LDINS4
	LDA	INSTAB,X
	CMP	#$FE		; ALL DONE
	BNE	LDINS6		; NO
LDINS2
	RTS
;
;
DRAWER			; DRAW THE LINE
	LDA	#$55
DRAWR3		; ENTRY POINT FROM UPINST  ************************
	STA	TEMP1
	LDA	NUMPTS
	STA	TEMP4
	AND	#$7F
	STA	NUMPTS
DRAWR1
	LDY	VDRAW
	LDA	VCONL,Y
	STA	PNTR
	LDA	VCONH,Y
	STA	PNTR+1
	LDA	HDRAW
	LSR	A
	LSR	A
	STA	TEMP
	LDA	HDRAW
	AND	#$03
	TAY
	LDA	MASK,Y
	AND	TEMP1
	LDY	TEMP
	ORA	(PNTR),Y
	STA	(PNTR),Y
	BIT	TEMP4
	BPL	DRAWR4
	INC	VDRAW
	BNE	DRAWR5		; JUMP, VDRAW CANNOT CROSS 0 !!
DRAWR4
	INC	HDRAW
DRAWR5
	DEC	NUMPTS		; POINTS ALL DRAWN ?
	BNE	DRAWR1
DRAWR2
	RTS
;
;
;
;
PINST
;		UPDATE  INSET
;
;		FIRE CONTROL
	LDX	DCSTOR		; WHICH OBJECT
	LDY	TARPTR
	CPY	#$05
	BCS	UPINST2
;		LD TARGET DISPLAY
	LDA	HTARGT
	STA	HDRAW
	LDA	ZYTARG,Y
UPINS8
	ASL	A
	STA	TEMP2
	BCC	UPINST9
	LDA	#$81
	STA	NUMPTS
	LDA	VTARGT
	STA	VDRAW
	LDA	#$AA
	JSR	DRAWR3
UPINS9
	INC	HDRAW
	LDA	TEMP2
	BNE	UPINS8
	INC	VTARGT
UPIN10
	INC	TARPTR
	RTS
UPINS2
	CPY	#$0A
	BCC	UPIN10
	LDA	STFLAG,X
	BEQ	UPINS3
	LDA	YPOSH,X
	LDY	YSIGN,X
	BEQ	UPINS4
	CMP	#$0C
	BCC	UPINS5
UPINS4
	CMP	#$F5
	BCS	UPINS5
	LDA	#$F5
UPINS5
	CLC
	ADC	#131
	STA	HTRGT
	LDA	ZPOSH,X
	EOR	#$FF
	LDA	ZSIGN,X
	BNE	UPINS6
	CMP	#$05
	BCC	UPINS7
	LDA	#$04
	BPL	UPINS7		; JUMP
UPINS6
	CMP	#$FA
	BCS	UPINS7
	LDA	#$FA
UPINS7
	CLC
	ADC	#77
	STA	VTARGT
	LDA	#$00
	STA	TARPTR
UPINS3
;		CLEAR INSET
	LDA	#INSET
	STA	PNTR
	LDA	#INSET/256
	STA	PNTR+1
	LDX	#14
UPIN12
	LDY	#$06
UPIN13
	LDA	(PNTR),Y
	AND	#$55
	STA	(PNTR),Y
	DEY
	BPL	UPIN13
	CLC
	LDA	PNTR
	ADC	#40
	STA	PNTR
	BCC	UPIN14
	INC	PNTR+1
UPIN14
	DEX
	BPL	UPIN12
;		DONE CLEAR INSET
	LDX	DCSTOR
	INY		; Y=0
	LDA	LOKWAT
	BEQ	UPIN11
	DEC	LOKWAT
	BNE	UPINS1
UPIN11
	LDA	HTARGT
	CMP	#129
	BCC	UPINS1
	CMP	#133
	BCS	UPINS1
	LDA	#$AA
	STA	ICON2
	STA	ICON2+6
	LDA	VTARGT
	CMP	#75
	BCC	UPINS1
	CMP	#79
	BCS	UPINS1
	LDA	#$AA
	STA	ICON2+160
	STA	ICON2+166
	LDA	XPOSH,X
	CMP	#$0C
	BCS	UPINS1
	LDY	#$A0
	STY	ICON1
	STY	ICON1+40
	STY	ICON1+2
	STY	ICON1+42
UPINS1
	STY	LOKFLG
	RTS
;
;
;
;
;
;
HSERVE
;		HYPERWARP SERVICE ROUTINE
	LDY	HFLAG		; HWAPR ?
	BEQ	HSERV4		; NO
	LDA	SEEPD
	CMP	#$FE		; UP TO SPEED ?
	BCS	HSERV5		; YES
	CMP	#$80		; DO LINES ?
	BCC	HSERV6		; NO
	JSR	HLINES
HSERV6
;		STEERING STUFF
	LDA	#$03
	STA	DCSTOR
	LDA	#$90
	STA	GINDEX+3
	STA	STFLAG+3
	LDA	#$1F
	STA	XPOSH+3
	SEC
	LDA	VPOS+3
	SBC	#VOBCEN-3
	CLC
	ADC	VSTEER
	AND	#$7F
	STA	HYVPOS
	SEC
	LDA	HPOS+3
	SBC	#HOBCEN
	CLC
	ADC	HSTEER
	AND	#$7F
	STA	HYHPOS
	LDA	MISDIF
	BEQ	HSERV7
	LDA	RANDOM
	LDY	DISFLG
	BEQ	HSERV9
	STA	HPOS+3
	STA	VPOS+3
HSERV9
	CMP	#$10
	BCS	HSERV4
HSERV7
	LDA	RANDOM
	ORA	#$10
	AND	STERMK
	STA	YINCRE+3
	LDA	RANDOM
	ORA	#$10
	AND	STERMK
	STA	ZINCRE+3
HSERV4
	RTS
HSERV5
	TYA		; IN JUMP ?
	BMI	HSERV8		; YES
;		BEGIN JUMP
	LDA	#$FF
	STA	HFLAG
	LDX	#CH4TB1-CH4TAB
	JSR	NOTINT
	JSR	CSERV8		; JUMP ENERGY
	LDY	#SENHSP-SENTAB
	JMP	HABOR1
HSERV8		; IN JUMP
	DEC	HYPENG		; ALL DONE ?
	BEQ	HSER10		; YES
	LDX	#$02		; DEC ENERGY
	JMP	PANDS6
HSER10
;		HWARP COMPLETE
	LDY	#SENHWC-SENTAB
	JSR	HABOR2
	LDA	HYHPOS
	STA	GHPOS
	LDA	HYVPOS
	STA	GVPOS
	LSR	A
	AND	#$07
	TAX
	LDA	JMASK,X
	STA	JMPMSK
	LDY	HYPGAD
	STY	GUADRT
	LDA	#$00
	STA	BASFLG
	LDX	CHTRAM,Y
	BPL	HSERV2
	LDA	#$FF		; STARBASE STUFF
	STA	BASFLG
	LDY	#$00
HSERV3
	LDA	#$00
	STA	XINCRE+2,Y
	LDA	#$01
	STA	XSIGN+2,Y
	LDA	RANDOM
	AND	JMPMSK
	STA	XPOSH+2,Y
	TYA
	CLC
	ADC	#RAMNUM
	TAY
	CMP	#RAMNUM*3
	BCC	HSERV3
	LDA	XPOSH+2
	ORA	#$71
	STA	XPOSH+2
	LDX	#$02
	JMP	NEWST4
HSERV2
	BEQ	HSERV1
	LDA	#$FF		; RED ALERT
	STA	REDFLG
	LDX	#CH4TB2-CH4TAB
	JSR	NOTINT
	LDY	#SENRED-SENTAB
	JSR	LDMESS
HSERV1
	RTS
;
;
;
;
HABORT
;	HYPERWARP ABORT ROUTINE
	LDX	#$01
	JSR	PANDS6
	LDY	#SENHWA-SENTAB		; ABORT
HABOR2		; ENTRY POINT HWARP COMPLETE  ***********************
	LDA	#$00
	STA	WARP
	STA	HFLAG
HABOR1		; ENTRY POINT BEGIN JUMP  **************************
	LDA	#STLAST
	STA	NSTARS
	LDA	#$00
	STA	HISPED
	STA	ETIMER		; KEEP PROGRAM FROM GOING SOUTH
	STA	HITME		; CLEAR THE OTHER EXPLOS BUG
	STA	GINDEX+3
	STA	WPENER
	CPY	#SENHWA-SENTAB
	BEQ	HABOR3
	STA	STFLAG+0
	STA	STFLAG+1
HABOR3
	STA	STFLAG+2
	STA	STFLAG+3
	STA	STFLAG+4
	STA	BSEQTM
	STA	DCSTOR
	JMP	LDMESS
;
;
;
;
HLINES
;		DRW HWARP LINES
	DEC	HTIMER
	BPL	HLINE1
	LDA	#$01
	STA	HISPED
	LDA	#RMLAST		; HWARP STARS ON
	STA	NSTARS
	LDA	#$03
	STA	HTIMER
;			RESET LINES
	LDX	HPNTR
HLINE2
	LDA	#$12		; XINIT
	STA	PNTR+1
	LDA	RANDOM		; INIT Y,Z
	AND	#$03
	TAY
	LDA	YINIT,Y
	STA	YPOSH,X
	LDA	ZINIT,Y
	STA	ZPOSH,X
	JSR	NEWST4		; WHICH QUADRANT
	TXA
	TAY			; X GOES TO Y
	LDA	#$05
	STA	TEMP4
HLINE4
;
	CLC
	LDA	PNTR
	ADC	#$50		; XINCRE
	STA	PNTR
	STA	XPOSL,X
	LDA	PNTR+1
	ADC	#$00
	STA	PNTR+1
	STA	XPOSH,X
	LDA	#$00
	STA	XINCRE,X
	STA	YINCRE,X
	STA	ZINCRE,X
;
	LDA	#$01
	STA	XSIGN,X		; AND THAT FIXES THAT
	LDA	#$99		; OFF-SCREEN
	STA	VPOS,X
	STA	HPOS,X
	JSR	EXHLP1		; DEFINE Y,Z
	DEX
	CPX	#STLAST+1
	BCS	HLINE3
	LDX	#RMLAST
HLINE3
	DEC	TEMP4
	BPL	HLINE4
	STX	HPNTR
HLINE1
	RTS
	;
;
;
;
DIVIDE
;	A = (TOP/BOTTOM)X80
;
	LDA	#$00		;CLEAR THE RESULT
	STA	TEMP3
	LDA	#$07		; NUMBER OF SHIFTS
	STA	TEMP4
;			SHIFT 0 INTO THE MSBIT
	LSR	TEMP1		; TOP NUMBER
	ROR	TEMP
	LDA	DISFLG		; FRONT OR BACK  ?
	BNE	DIVID1		; BACK
	LDA	XPOSH,X		; BOTTOM NUMBER
	LSR	A
	STA	PNTR+1
	LDA	XPOSL,X
	ROR	A
	STA	PNTR
	JMP	DIVID2
DIVID1
	SEC
	LDA	#$00
	SBC	XPOSL,X
	STA	PNTR
	LDA	#$00
	SBC	XPOSH,X
	LSR	A
	STA	PNTR+1
	ROR	PNTR
;
DIVID2
	ASL	TEMP3		; SHIFT RESULT
	SEC	; SUBTRACT BOTTOM FROM TOP
	LDA	TEMP
	SBC	PNTR
	TAY
	LDA	TEMP1
	SBC	PNTR+1
	BCC	DIVID3		; BOTTOM GREATER THAN TOP
;		TOP LARGER
	STA	TEMP1		; STORE REMAINDER
	STY	TEMP
	INC	TEMP3		; ADD 1 TO RESULT
DIVID3
	ASL	TEMP		; SHIFT TOP
	ROL	TEMP1
	BCC	DIVID4
;		IF TOP IS GREATER THN BOTTOM THEN OVERFLOW
	LDA	#$FF		; MAX VALUE TO RESULT
	RTS
DIDIV4
	DEC	TEMP4		; NEXT BIT
	BPL	DIVID2
	LDY	TEMP3		; RESULT IN Y
	LDA	PTAB,Y		; MULTIPLY BY 80  (PTAB)
DIVID5		; ENTRY POINT FROM THINK  ******************
	RTS
;
;
;
;
THINK
;		COMPUTER ATTACK SUBROUTINE
	LDA	HFLAG
	ORA	BASFLG
	BNE	DIVID5		; BRANCH TO RTS
;		CRUISER PHOTON CONVERGENCE
	LDA	LOKLOC
	BEQ	THIN38
	LDX	LOKTAR
	SEC
	LDA	VPOS,X
	SBC	VPOS+3
	BCC	THIN37
	LDA	#$00
THIN37
	JSR	POHELP
	STA	ZINCRE+3
	STA	ZINCRE+4
	SEC
	LDA	HPOS+3
	SBC	HPOS,X
	JSR	POHELP
	STA	YINCRE+3
	SEC
	LDA	HPOS+4
	SBC	HPOS,X
	JSR	POHELP
	STA	YINCRE+4
;
THIN38
;
;		HELPER FOR THINK
	LDX	#$03
THIN39
	DEC	ROTTIM,X
	BPL	THIN44
	TXA
	LSR	A
	TAY
	LDA	HORJOY,Y
	LDY	DISFLG
	BEQ	THIN40
	EOR	#$FF
	CLC
	ADC	#$01
THIN40
	CLC
	ADC	XINPRS+2,X
	BPL	THIN41
	LDA	#$00
THIN41
	CMP	#$10
	BCC	THIN42
	LDA	#$0F
THIN42
	STA	XINPRS+2,X
	CMP	#$08
	BCC	THIN43
	EOR	#$0F
THIN43
	ASL	A
	STA	ROTTIM,X
THIN44
	DEX
	BPL	THIN39
;
	LDA	GINDEX+2
	BNE	THINK2		; NOT A PHOTON
;		PHOTON CONVERGENCE
	LDY	MISDIF		; DIFFICULTY
	LDA	PHODIF,Y
	LDX	ZPOSH+2
	BPL	THINK3
	AND	#$7F
THINK3
	STA	ZINCRE+2
	ORA	#$80
	LDX	YPOSH+2
	BPL	THINK4
	AND	#$7F
THINK4
	STA	YINCRE+2
THINK2
	LDA	BINTIM
	AND	#$03
	BEQ	THINK5
THINK1
	LDA	GRAPH+2
	BEQ	THIN20		; NOT ON
	LDA	STFLAG+2
	BNE	THIN14
THIN20
	;		METORITE
	LDA	RANDOM
	CMP	#$04
	BCS	THIN14
	LDA	#$60
	STA	GINDEX+2
	LDX	#$02
	JSR	NEWSTR		; DEFINE LIKE A STAR
	LDA	#60
	STA	STFLAG+2
	LDA	#$88
	STA	XINCRE+2
	LDA	#$00
	STA	HPOS+2		; METEROR FLASH
	STA	YINCRE+2
	STA	ZINCRE+2
THIN14
	RTS
THINK5
	LDA	ZYTOGG
	EOR	#$01
	STA	ZYTOGG
	TAX		; WHICH ZYLON TO THINK
	LDA	STFLAG,X		; ALREADY ON?
	BNE	THINK6		; YES
;		INIT ZYLON
	LDA	STFLAG+0
	ORA	STFLAG+1
	AND	#$01
	LDY	QUADRT
	CMP	CHTRAM,Y
	BCS	THINK1
;			OK TO INIT
	LDA	#$FF
	STA	STFLAG,X
	LDA	RANDOM
	AND	#$07
	TAY
	LDA	ZYGIND,Y
	STA	GINDEX+0,X
	LDA	MISDIF
	BEQ	THIN45
	LDA	INTSEQ,Y
THIN45
	STA	SEQEN,X
	LDA	#$01
	STA	SEQTIM,X
	STA	XSIGN,X
	LDA	RANDOM
	AND	JMPMSK
	STA	ZPOSH,X
	ADC	#$13
	STA	YPOSH,X
	ORA	#$71
	STA	XPOSH,X
	JSR	NEWST4		; Y,Z RANDOM SIGN
THINK6
;
;		SEQUENCER AND TIMEOUT SECTION
;
	LDA	XPOSH,X
	CMP	#$20
	BCS	THIN27
	LDA	XSIGN,X
	BEQ	THIN26
	LDA	GRAPH,X
	BEQ	THIN27
	CMP	#ZYGRF6-ZYGRAF
	BEQ	THIN27
THIN26
	LDA	#$00
	STA	SEQEN,X
THIN27
	DEC	SEQTIM,X		; TIMEOUT
	BPL	THIN30
	LDA	#120
	STA	SEQTIM,X
	LDA	MISDIF
	LDY	RANDOM
	CPY	#$30
	BCC	THIN35
	LSR	A
THIN35
	LSR	A
	STA	BSTRAF,X
	LDA	SEQEN,X
THIN28
	BIT	RANDOM
	BPL	THIN31
	EOR	#$0F
THIN31
	STA	XINDES,X
	INX
	INX
	CPX	#$06
	BCC	THIN28
	LDX	ZYTOGG		; RESTORE X
THIN30
;
;		ZYLON STRAFING SECTION
;
	LDA	SEQEN,X
	BNE	THIN24
	LDY	ZYTOGG
THIN11
	CPY	#RAMNUM
	BCS	THIN12
	LDA	BSTRAF,Y
	LSR	A
	LDA	XPOSH,Y
	BCS	THIN36
	CMP	#$0A
	BCC	THIN22
	BCS	THIN12		; JUMP
THIN36
	CMP	#$F5
	BCS	THIN33
THIN12
	LDA	XSIGN,Y
	LSR	A
THIN33
	LDA	#$0F
	BCS	THIN23
THIN22
	LDA	#$00
THIN23
	STA	XINDES,X
	CLC
	TYA
	ADC	#RAMNUM
	TAY
	INX
	INX
	CPX	#$06
	BCC	THIN11
	LDX	ZYTOGG		; RESTORE X
THIN24
;
;		ACCELERATION SECTION
;
	LDY	ZYTOGG
THINK8
	LDA	XINPRS,X
	CMP	XINDES,X
	BEQ	THINK10
	BCS	THINK9
	INC	XINPRS,X
	BCC	THIN10		; JUMP
THINK9
	DEC	XINPRS,X
THIN10
	STX	TEMP		; SAVE X
	TAX
	LDA	ZYWARP,X
	LDX	TEMP		; RESTORE X
	STA	XINCRE,Y
	TYA
	CLC
	ADC	#RAMNUM
	TAY
	INX
	INX
	CPX	#$06
	BCC	THINK8
	LDX	ZYTOGG		; RESTORE X
;
;
;		FIRE PHOTON
	LDA	GINDEX+2
	BNE	THIN16
	LDA	STFLAG+2
	BNE	THIN13
	LDA	PHEXWT
	BEQ	THIN16
	DEC	PHEXWT
THIN13
	RTS
THIN16
	CLC
	LDA	ZPOSH,X
	ADC	#$02
	CMP	#$05
	BCS	THIN13
	LDY	#$D0
	LDA	XSIGN,X
	LSR	A
	LDA	XPOSH,X
	BCS	THIN15
	EOR	#$FF
	LDY	MISDIF
	BEQ	THIN13
	LDY	#$50
THIN15
	CMP	#$20
	BCS	THIN13
	STY	XINCRE+2
	LDA	#$00
	STA	GINDEX+2
	STA	HPOS+2		; METEOR FLASH
	LDA	#62
	STA	STFLAG+2
	LDX	#$02
	LDY	ZYTOGG
	STY	ATTARG
	JMP	EXHELP
;
;
;
EXPLOS
;		INIT EXPLOSION
;		Y CONTAINS INDEX OF ZYLON HIT
	LDA	#$80		; 2 SECONDS
	STA	ETIMER
	LDX	#RMLAST
	STX	NSTARS		; LAST STAR FOR EXPLOSION
EXPLS1
	LDA	RANDOM
	AND	#$0F
	ADC	HPOS,Y
	SBC	#$30
	STA	HPOS,X
	LDA	RANDOM
	AND	#$0F
	ADC	VPOS,Y
	LSR	A
	SBC	#$10
	STA	VPOS,X
	JSR	EXHELP
	LDA	RANDOM
	AND	#$87
	STA	XINCRE,X
	LDA	RANDOM
	AND	#$87
	STA	YINCRE,X
	LDA	RANDOM
	AND	#$87
	STA	ZINCRE,X
	DEX
	CPX	#STLAST
	BNE	EXPLS1
	RTS
;
;
EXHELP
	;	EXPLOSION HELPER
	LDA	XSIGN,Y
	STA	XSIGN,X
	LDA	XPOSH,Y
	LDA	XPOSH,X
	LDA	XPOSL,Y
	STA	XPOSL,X
EXHLP1		; ENTRY POINT FROM HLINES	*************************
	LDA	XSIGN,Y
	STA	XSIGN,X
	LDA	XPOSH,Y
	STA	XPOSH,X
	LDA	ZSIGN,Y
	STA	ZSIGN,X
;
	LDA	ZPOSH,Y
	STA	ZPOSH,X
	LDA	YPOSL,Y
	STA	YPOSL,X
	LDA	ZPOSL,Y
	STA	ZPOSL,X
EXHLP2		; ENTRY POINT FROM BSERVE  **********************
	RTS
;
;
;
;
BSERVE
;		STARBASE SERVICE ROUTINE
	LDA	BASFLG
	BEQ	EXHLP2		; BRANCH TO RTS
	LDA	DISFLG
	BNE	BSERV9
	LDA	#$14		; PRIORITY FOR FRONT VIEW OF STARBASE
	STA	PRIOR
BSERV9
	LDA	#$02
	STA	DCSTOR
;
	LDA	#$30
	STA	GINDEX+2
	LDA	#$20
	STA	GINDEX+1
	LDA	#$40
	STA	GINDEX+0
	LDA	#$FF
;
	LDX	QUADRT
	LDY	CHTRAM,X
	BMI	BSER13
	LDA	#$00
BSER13
	STA	STFLAG+0
	STA	STFLAG+1
	STA	STFLAG+2
	STA	BASFLG
	BMI	BSERV1
	LDY	#$02
	JSR	EXPLOS
	LDX	#NOITB1-NOISTB
	JMP	NOISE
BSERV1
	;		TOO CLOSE ?
	LDA	XPOSH+2
	BNE	BSER14
	LDA	XPOSL+2
	CMP	#$20
	BCS	BSER14
	INC	XPOSL+2
BSER14
;		ORBIT  ?
	LDA	HPOS+2
	SEC
	SBC	#$78
	CMP	#$10
	BCS	BSERV8
	LDA	VPOS+2
	SEC
	SBC	#$68
	CMP	#$10
	BCS	BSERV8
	LDA	XPOSH+2
	CMP	#02
	BCS	BSERV8
	LDA	XSIGN+2
	AND	ZSIGN+2
	EOR	#$01
	ORA	SPEED
	ORA	ZPOSH+2
	ORA	WARP
	BEQ	BSERV3		; IN ORBIT
BSERV8
	LDA	BSEQTM		; ORBIT ABORTED
	CMP	#$02
	BCC	BSER15
	LDY	#SENDKA-SENTAB
	JSR	LDMESS
BSER15
	LDA	#$00
	STA	BSEGTM
BSER11
	RTS
;
BSERV3
	BIT	BSEGTM
	BVS	BSERV4
	BMI	BSERV5
	LDA	BSEQTM		; LD MESS
	BNE	BSER11		; NO
	DEC	BSEQTM		; =FF
	LDY	#SENORB-SENTAB
	JMP	LDMESS
BSERV4
	LDX	#$00
	STX	REPMSG
	LDY	SENPTR
	BNE	BSER11		; WAIT FO MESSAGE TO TIMEOUT
	LDA	#$50
	STA	GINDEX+4
	LDA	#$01
	STA	XSIGN+4
	STA	YSIGN+4
	STA	ZSIGN+4
	STA	ZPOSH+4
	STA	YINCRE+4
	LDA	#$10
	STA	XPOSH+4
	LDA	#$00
	STA	YPOSH+4
	LDA	#$87
	STA	XINCRE+4
	LDA	#$81
	STA	BSEQTM
	STA	ZINCRE+4
	STA	STFLAG+4
BSERV7
	RTS
BSERV5
	LDA	XSIGN+4		; SHIP DOCKED ?
	BNE	BSERV7		; NO
	LDX	#CH4TB3-CH4TAB		; SOUND
	JSR	NOTINT
	LDY	#SENETC-SENTAB
	JSR	LDMESS
;		CLEAR	DAMAGE
	LDX	#$05
BSER12
	LDA	STINIT+73,X
	STA	DAMAGE,X
	DEX
	BPL	BSER12
;
;		NEW ENERGY
	LDA	#$89
	LDX	#$03
BSER20
	STA	DENERG+0,X
	DEX
	BPL	BSER20
	LDA	#$07
	STA	XINCRE+4
	LDA	#$81
	STA	YINCRE+4
	LDA	#$01
	STA	ZINCRE+4
	STA	BSEQTIM
	JMP	KEYSR7		; RE-LOAD INSET
;
;
;
;
LDISP
;	LOAD DISPLAY LISTS
;	A=#OF BYTES TO STORE, X=POSIT IN DSPLY, Y=PNTR IN LISTAB
	SEI		; WE DONT WANT NO INTERUPTS !!
	STA	TEMP
LDISP3
	LDA	VCOUNT		; CHECK IF ANTIC IS IN SAFE AREA
	CMP	#DISTOP
	BCC	LDISP3
LDISP2
	LDA	LISTAB,Y
	INY
	BPL	LDISP1
	LDA	#$0D
LDISP1
	STA	DISPLY,X
	INX
	DEC	TEMP
	BNE	LDISP2
	CLI			; IRQS BACK ON  !!
	RTS
;
;
;
;
;
;
;
;
CLRMAP
;		CLEAR MEMORY MAP SUBROUTINE
	LDA	#MEMMAP/256
CLRMP1		; ENTRY POINT CLEAR ALL RAM  ************************
	STA	PNTR+1
	LDA	#$00
	TAY
	STA	PNTR
	STA	LOKFLG		; LOCK FLAG IS CLEARED
	STA	CNSTAR		; RAM HAS BEEN CLEARED
CLRMP2
	STA	(PNTR),Y
	INY
	BNE	CLRMP2
	INC	PNTR+1
	LDY	PNTR+1
	CPY	#$20
	TAY		; RE-ZERO Y REG
	BCC	CLRMP2
	RTS
;
;
PHOTON
;		PHOTON TORPEDO FIRE
	LDA	PHOFLG		; REPEAT FLAG
	LDY	TRIG0		; SHOOT ?
	STY	PHOFLG
	BNE	PHOTN2		; NO
	STY	TIMOUT		; RESET ATRACT TIMEOUT
	LDX	HFLAG		; HWARP ?
	BNE	PHOTN2		; YES, NO FIRE
	LDX	PHOTOG
	CMP	#$01
	BEQ	PHOTN8
	BCS	PHOTN4
PHOTN2
	RTS
PHOTN8
;		ONE-SHOT
	LDA	STFLAG+3,X		; ONE-SHOT TIMEOUT
	CMP	#$E8		; ALL DONE ?
	BCS	PHOTN2		; NO
	LDY	DCSTOR
	STY	LOKTAR
	LDA	#12
	LDY	LOKFLG
	STY	LOKLOC
	BEQ	PHOTN3
	LDA	#$00
PHOTN3
	STA	LOKWAT
PHOTN4
	STY	PHOFLG
;
	BIT	DAMAGE+0
	BVS	PHOTN2
	BMI	PHOTN7
	TXA
	EOR	#$01
	STA	PHOTOG
PHOTN7
	TXA
	STA	YSIGN+3,X		; NEW YSIGN
	LDA	PHOYPS,X		; NEW YPOSH
	STA	YPOSH+3,X
	LDA	#$FF
	STA	STFLAG+3,X		; INIT PHOTON TIME
	STA	ZPOSH+3,X
	LDA	#$00
	STA	GINDEX+3,X		; INIT PHOTON GRAPHIC
	STA	XPOSH+3,X
	STA	YPOSL+3,X
	STA	ZSIGN+3,X
	STA	ZPOSL+3,X
	LDA	#$01
	STA	XSIGN+3,X
	STA	XPOSL+3,X
	LDA	DISFLG
	LSR	A
	ROR	A
	ORA	#$66
	STA	XINCRE+3,X
	LDA	#$00
	STA	YINCRE+3,X
	STA	ZINCRE+3,X
	LDX	#$02
	JSR	PANDS6			; PHOTON ENERGY
	LDX	#$00
;
;		FALL THROUGH TO NOISE  ************************
;
NOISE
;		NOISE INIT, X=NOISTB PNTR
	TXA		; PHOTONS
	BNE	NOISE1		; NO
	;	PHOTONS HAVE LOWER PRIORITY THAN EXPLOSIONS

	LDA	AUDTIM
	CMP	#$18
	BCS	NOISE2
NOISE1
	LDY	#$07
NOISE3
	LDA	NOISTB,X
	STA	PHOREP,Y
	INX
	DEY
	BPL	NOISE3
	LDA	NOISTB,X
	STA	AUDCTL
	LDA	NOISTB+1,X
	STA	AUDF3
NOISE2
	RTS

;
;
POHELP
;		PHOTON HELPER
	LDY	#$80
	BCS	POHLP1
	EOR	#$FF
	LDY	#$00
POHLP1
	STY	TEMP
	CMP	#$08
	BCC	POHLP2
	LDA	#$07
POHLP2
	TAY
	LDA	TEMP
	ORA	PHVECT,Y
	RTS
;
;
;
DAMCTL
;		DAMAGE CONTROL ROUTINE
	BIT	ATRACT
	BMI	DAMCT1		; GAME OVER NO DAMAGE
	LDX	MISDIF
DAMCT2
	LDA	RANDOM
	CMP	DPRBTB,X
	BCS	DAMCT1
	AND	#$07
	CMP	#$06
	BCS	DAMCT1
	TAX
	LDA	DAMAGE,X
	ASL	A
	BMI	DAMCT2
	LDA	STFLAG+2
	CMP	#30
	LDA	#$80
	LDY	DAMGTB,X
	BCC	DAMCT3
	CPX	#$03
	BNE	DAMCT5
	BIT	DAMAGE+4
	BVS	DAMCT3
DAMCT5
	CPX	#$04
	BNE	DAMCT6
	BIT	DAMAGE+3
	BVS	CAMCT3
DAMCT6
	LDA	#$C0
	LDY	DESTTB,X
DAMCT3
	ORA	DAMAGE,X
	STA	DAMAGE,X
	STY	REPMSG
	BIT	DAMAGE+3
	BVC	DAMCT4
	LDA	#$00
	STA	ATENER
	JSR	CLRMAP
DAMCT4
	LDY	#SENDMC-SENTAB
	JSR	LDMESS
	LDX	#CH4TB4-CH4TAB		; DAMAGE
	JSR	NOTINT
DAMCT1
	RTS
;
;
HITZYL
;		PHOTON HIT ZYLON CHECK
	LDX	#$02		; 2 PLAY PHOTONS
HITZY2
	DEX
	BPL	HITZY1
	RTS
HITZY1	LDA	GINDEX+3,X		; PHOTON ?
	BNE	HITZY2			; NO
	LDA	STFLAG+3,X		; PHOTON ON ?
	BEQ	HITZY2		; NO
	LDA	PHITS+0,X		; ANY HIT ?
	AND	#$07		; LOOK AT 0,1 ONLY
	BEQ	HITZY2		; NO HIT
	LSR	A		; 0 OR 1 ONLY
	CMP	#$03
	BNE	HITZY9
	LSR	A
HITZY9
	TAY			; OBJECT INDEX IN Y
	LDA	STFLAG,Y		; SHIP ON ?
	BEQ	HITZY2			; NO
	LDA	DISFLG
	BEQ	HITZY8
	LDA	#$FF
HITZY8
	STA	TEMP2
	EOR	XPOSH,Y
	CMP	#$10
	BCC	HITZY3
	LDA	#$0F
HITZY3
	LSR	A
	STY	TEMP1
	TAY
	LDA	TEMP2
	EOR	XPOSH+3,X
	CMP	PHPOST,Y		; TOP BOUND
	BCS	HITZY2
	CMP	PHPOSB,Y		; BOTTOM BOUND
	BCC	HITZY2
	LDY	TEMP1
;		A HIT  !!!
	SEC
	LDA	#$FF
	SBC	STFLAG+3,X
	STA	EXPDEL		; AUDIO
	CMP	#15
	BCC	HITZ11
	LDA	GINDEX,Y
	CMP	#$80
HITZ11
	LDA	#$00
	STA	LOKWAT
	STA	STFLAG+3,X		; PHOTON OFF
	BCS	HITZ10
	STA	STFLAG,Y		; ZYLON OFF
	LDA	GINDEX,Y
	BEQ	HITZ10		; PHOTON
	CMP	$#60		; METORER
	BEQ	HITZ10		; YES
	LDA	#$00
	STA	LOKLOC		; TURN OFF PHOTONS TRACKING
	LDX	QUADRT		; WHICH QUAD KILL IN
	DEC	CHTRAM,X		; REMOVE FROM CHART
	BPL	HITZY4
	LDA	#$00		; JUST BLASTED A STARBASE ELSE IMPOSSIBLE
;					TO GET HERE
	STA	CHTRAM,X
	SEC
	LDA	RATING
	SBC	#3
	STA	RATING
	LDA	RATING+1
	SBC	#$00
	STA	RATING+1
	RTS
HITZY4
;
;		INCKIL
;		INCRE KILL COUNT DISPLAY
	CLC
	LDA	RATING
	ADC	#$06
	STA	RATING
	LDA	RATING+1
	ADC	#$00
	STA	RATING+1
	LDX	#$01
INCKL1
	INC	DKILL,X		; KILL BYTE INCRE
	LDA	DKISLL,X
	CMP	#$4A		; BCD OBERFFLOW
	BCC	INCKL2		; NO.
	LDA	#$40		; BCD 0
	STA	DKILL,X
	DEX
	BPL	INCKL1		; NEXT BYTE
INCKL2
;
HITZ10
	JSR	EXPLOS
	LDX	#127
HITZY5
	LDA	CHTRAM,X
	BMI	HITZY6
	BNE	HITZY7
HITZY6
	DEX
	BPL	HITZY5
;		WIN
	LDY	#SENWIN-SENTAB
	LDX	#$00
	JSR	CRATE1
HITZY7
	RTS
;
;
;
;
;
KEYSERV
;		KEYBOARD SERVICE ROUTINE
	LDA	THEKEY		; ANY KEY
	BEQ	KESR3		; NO
	LDX	#$14		; LAST KEY
	STA	TEMP
	LDA	#$00
	STA	TIMOUT		; RESET ATRACT TIMEOUT
	STA	THEKEY		; TURN OFF KEY
	LDA	#$11
	STA	PRIOR		; RESET PRIORITY , FROM STARBASE
KEYSR1
	LDA	CODCON,X		; KEY CODES
	CMP	TEMP
	BEQ	KEYSR2
	DEX
	BPL	KEYSR1		; NEXT KEY
;			NO KEY
	LDY	#SENWHT-SENTAB		; WHAT
	JMP	LDMESS
KEYSR2			; KEY FOUND
	CPX	#$0A		; IMPULSE ENGINE ?
	BCS	KEYSR4		; NO
	LDA	HFLAG		; HWARP ?
	BEQ	KEYS20		; NO
	JMP	HABORT
KEYS20
	BIT	DAMAGE+1		; ENGINES
	BVC	KEYS23
	CPX	#$06
	BCC	KEYS23
	LDX	#$05
KEYS23
	LDA	WENTAB,X
	STA	WPENER		; IMPULSE ENGINE ENERGY
	LDA	WARPTB,X		; SPEED
	STA	WARP		; SPEED DESIRED
KEYSR3
	RTS
KEYSR4
	CPX	#$0E		; DISPLAY TYPE KEY ?
	BCS	KEYSR5		; NO
;
KEYS15		; ENTRY POINT TO INIT DISPLAY,  ***********************
;		X MUST BE DEFINED TO THE KEY CODE IN CODCON
	LDA	DISTYP-10,X
	STA	DISFLG
	LDY	DISDIS-10,X
	LDX	#DISPL1-DISPLY
	LDA	#$08
	JSR	LDISP
;
	LDX	#STLAST
KEYSR6
	JSR	NEWSTR
	DEX
	CPX	#OBJNUM
	BCS	KEYSR6
	BCC	KEYSR7		; JUMP
KEYSR5
	CPX	#$11		; TOGGLE TYPE ?
	BCS	KEYSR8		; NO
	LDY	TOFFMG-$0E,X
	LDA	TRKFLG-$0E,X
	EOR	TOGTAB-$0E,X
	STA	TRKFLG-$0E,X
	BEQ	KEYSR9
	LDY	TONMSG-$0E,X
KEYSR9
	JSR	LDMESS
	LDX	#CH4TB3-CH4TAB		; KEYS
	JSR	NOTINT
KEYSR7		; ENTRY POINT FOR RE-LOADING INSET  ***********
	LDX	#$16
	LDY TRKFLG
	BEQ	KEYS18
	INX
KEYS18
	STX	DCSTOR-2
	JSR	CLRMAP
	LDA	ATENER
	BEQ	KEYSR3
	LDX	DISFLG
	BEQ	KEYS10
	CPX	#$01
	BNE	KEYSR3
	LDX	#INSTB1-INSTAB
KEYS10
	JMP	LDINST
KEYSR8
	CPX	#$11		; HYPERWARP ?
	BNE	KEYS13
	LDA	HFLAG		; HWARP ALREADY ON ?
	BNE	KEYS14
	LDA	#$7F
	STA	HFLAG
	LDA	#$FF
	STA	WARP
	LDA	#30
	STA	WPENER
	LDA	#RMLAST
	STA	HPNTR
;		H STEERING STUFF
	LDA	#$00
	STA	HTIMER
	STA	YPOSH+3
	STA	YPOSL+3
	STA	ZPOSL+3
	STA	XINCRE+3
	LDA	#$01
	STA	XSIGN+3
	STA	YSIGN+3
	STA	ZSIGN+3
	STA	ZPOSH+3
	LDA	HYHPOS
	STA	HSTEER
	LDA	HYVPOS
	STA	VSTEER
	LDA	MISDIF
	BEQ	KEYS24
	LDA	HYPENG
	ROL	A
	ROL	A
	ROL	A
	AND	#$03
	TAY
	LDA	STERTB,Y		; DIFFICULTY
KEYS24
	STA	STERMK
;		END STUFF
	LDY	#SENHYP-SENTAB		; MESSAGE HYPER WARP ENGAGED
	JMP	LDMESS
KEYS13
	CPX	#$13
	BCS	KEYS27		; PAUSE
	LDA	DCSTOR
	EOR	#$01
	AND	#$01
	STA	DCSTOR
KEYS14
	RTS
KEYS27
	BNE	KEYS28
	LDA	PORTA		; PAUSE UNTIL MOVE JOYSTICK
	CMP	#$FF
	BEQ	KEYS27
	RTS
KEYS28
;		MISSION ABORTED
	LDY	#SENABR-SENTAB
	LDX	#$04
;
;		FALL THROUGH TO CRATE  ************************
;
;
CRATE
;		CALCULATE RATING, X=0 MISSION COMPLETE, 4=ABORTED, 8-DESTROYED
;	Y=MESSAGE TYPE
;		GAME OVER, CALCULATE RATING

	LDA	#$00
	STA	STFLAG+3		; NO HWARP CURSOR
	STA	NPRIOR
	STA	SENPTR
	STA	REDFLG
	STA	AUDC4
	STA	WARP
	STA	SPABAK
	STA	SHENER
	STA	HFLAG
	STA	HISPED
CRATE1		; ENTRY POINT FOR A GOOD MISSION  **********************
	LDA	#$FF
	STA	ATRACT
	STY	REPMSG		; REPEAT MESSAGE
	TXA
	ORA	MISDIF		; MISSION DIFF GAME RESULT
	TAX
	LDA	DIFTAB,X
	CLC
	ADC	RATING
	TAX
	LDA	#$00
	STA	VERJOY
	STA	HORJOY
	ADC	RATING+1
	LSR	A
	TXA
	ROR	A
	LSR	A
	LSR	A
	LSR	A
	CMP	#$13
	BCC	CRATE2
	LDA	#$12
	LDX	#$0F
CRATE2
	STA	ENDRAT
	TAY
	TXA
	CPY	#$00
	BEQ	CRATE4
	CPY	#$0B
	BCC	CRATE5
	CPY	#$0F
	BCC	CRATE4
CRATE5
	LSR	A
	EOR	#$08
CRATE4
	AND	#$0F
	STA	ENDCLS
CRATE3
	RTS

;
;
;
CSERVE
;		SERVICE GALACTIC CHART
	LDA	HFLAG		; HWARP ON ?
	BNE	CSERV9		; YES
	LDA	DISFLG		; DOING GALACTIC CHART ?
	BMI	CSERV1		; NO
CSERV9
	RTS
CSERV1
	BIT	DAMAGE+5		; COMMUNICATIONS
	BMI	CSER10
	JSR	LDGALT		; LD UP THE CHART
CSER10
	LDA	TIMERX		; SLOW DOWN CURSOR MOVE
	AND	#$01
	BNE	CSERV8
	CLC		; UPDATE HORIZ CURSOR POS
	LDA	HYHPOS
	ADC	HORJOY
	AND	#$7F
	STA	HYHPOS
	CLC
	ADC	#HORCHT		; OFFSET TO POSITION ON SCREEN
	STA	HPOS+4		; PLAYER FOUR IS CURSOR
	CLC			; UPDATE VERT CURSOR POSITION
	LDA	HYVPOS
	ADC	VERJOY
	AND	#$7F
	STA	HYVPOS
	CLC			; OFF SET TO POSITION ON SCREEN
	ADC	#VERCHT
	STA	VPOS+4
;				SHIP POS TO OBJ3
	LDA	GVPOS
	CLC
	ADC	#VERCHT
	STA	VPOS+3
	LDA	GHPOS
	CLC
	ADC	#HORCHT
	STA	HPOS+3
;		CLACULATE CURSORS QUADRANT
;
CSERV8		; ENTRY POINT FOR CALCULATING NEW ENERGY AND QUADRANT  ******
	LDA	HYHPOS		; HPOS
	LSR	A
	LSR	A
	LSR	A
	STA	TEMP		;TEMP STORE H COMP
	LDA	HYVPOS		; VPOS
	AND	#$70		; VCOMP
	ORA	TEMP		; ADD HCOMP
	STA	HYPQAD		; QUADRANT CALCULATED
;			CALCULATE NUMBER OF ZYLONS IN TARGET
	TAX
	LDA	CHTRAM,X		; WHATS IN QUAD
	BPL	CSERV2		; STARBASE ?
	LDA	#$00		; YES
CSERV2
	ORA	#$90		; COLOR AND ASCII CODE
	BIT	DAMAGE+5
	BVS	CSER11
	STA	DTARG		; DISPLAY NUMBER OF ZYLONS
CSER11
;		CALCULATE WARP ENERGY
	SEC
	LDA	HYHPOS
	SBC	GHPOS
	BCS	CSERV3
	EOR	#$FF
	ADC	#$01
CSERV3
	STA	TEMP
;
	SEC
	LDA	HYVPOS
	SBC	GVPOS
	BCS	CSERV4
	EOR	#$FF
	ADC	#$01
CSERV4
	LSR	A
	CLC
	ADC	TEMP
	TAY
	LSR	A
	LSR	A
	LSR	A
	TAX
	TYA
	AND	#$03
	CLC
	ADC	ENGTAB,X
;
	STA	HYPENG
	TAY
	LDA	#$10
	STA	DWENER+0
	STA	DWENER+1
	STA	DWENER+2
CSERV6
	LDX	#$02
CSERV5
	INC	DWENER,X
	LDA	DWENER,X
	CMP	#$1A
	BCC	CSERV7
	LDA	#$10
	STA	DWENER,X
	DEX
	BPL	CSERV5
CSERV7
	DEY
	BNE	CSERV6
	RTS
;
;
;
MSERVE
;		SERVICE MESSAGE
	LDA	SENPTR		; MESSAGE ON ?
	BEQ	LDMS14		; NO
	DEC	MESTIM		; TIMED OUT ?
	BEQ	LDMES1		; YES
LDMES2
	RTS
LDMES14
	LDY	REPMSG		; REPEAT THE MESSAGE ?
	BEQ	LDMES2		; NO
LDMESS		; ENTRY POINT TO INIT MESSAGE  **********************
	STY	SENPTR
	LDY	#LISTB6-LISTAB
	LDX	#DISPL2-DISPLY
	LDA	#$07
	JSR	LDISP		; REVISE DISPLAY LIST FOR MESSAGE
LDMES1
	LDX	#19		; CLEAR MESSAGE RAM
	LDA	#$00
	STA	TEMP1		; CLEAR DISPLAY POINTER
LDMES3
	STA	MESAGE,X
	DEX
	BPL	LDMES3
LDMES4		; MESSAGE LOOP POINT
	LDX	SENPTR		; NEW WORD PNTR
	INC	SENPTR		; ADVANCE TO NEXT WORD
	BNE	LDMES5
;		MESSAGE DONE
	LDX	#DISPL2-DISPLY
	LDY	#$80
	LDA	#$07
	JMP	LDISP		; RESTORE DISPLAY LIST
LDMES5
	LDA	SENTAB,X		; A =NEW WORD
	CMP	#$FC		; CLASS ?
	BNE	LDMES6		; NO
	LDY	ENDCLS
	LDA	CLASTB,Y	; VALUE 1-5, IN DMA ASCII
	LDX	TEMP1		; WHERE TO STORE
	STA	MESAGE,X
	LDA	#60		; END OF LINE
	STA	MESTIM		; WAIT 1 SECOND
	RTS
LDMES6
	CMP	#$FD		; RANK ?
	BNE	LDMS12		; NO
	LDY	ENDRAT
	LDA	RANKTAB,Y		; RANK WORD
LDMS12
	STA	TEMP2		; STORE FOR BITS 7,6
	AND	#$3F
	STA	TEMP		; WORD LOC IN #WRDTAB
	LDA	#WRDTAB-1
	STA	PNTR
	LDA	#WRDTAB-1/256
	STA	PNTR+1		; WHERE TO START SEARCH
LDMES7
	INC	PNTR		; ADVANCE WORD POINTER
	BNE	LDMES8
	INC	PNTR+1
LDMES8
	LDY	#$00
	LDA	(PNTR),Y
	BPL	LDMES7		; NOT START OF A WORD
	DEC	TEMP		; IS IT THE RIGHT WORD?
	BNE	LDMES7		; NO
LDMES9
	AND	#$3F		; REMOVE ANY FLAG BITS
	EOR	#$A0		; PLAYFIELD AND DMA ASCII
	LDX	TEMP1		; DISPLAY POINTER
	INC	TEMP1		; ADVANCE DISPLAY POINTER
	STA	MESAGE,X
	INY			; NEXT LETTER
	LDA	(PNTR),Y	; A=LETTER
	BPL	LDMES9
	INC	TEMP1		; A SPACE
;		END OF WORD FOUND
	LDA	#60		; WAIT 1 SECOND
	BIT	TEMP2		; WHAT TO DO NEXT
	BPL	LDMS11		; NOT END OF LINE
	BVC	LDMS10		; END OF LINE ONLY
	LDA	#FE		; WAIT 4 SECOND, END OF SENTENCE
LDMS11
	BVC	LDMES4		; CONTINUE WITH LINE
	LDY	#$FF		; END OF SENTENCE
	STY	SENPTR
LDMS10
	STA	MESTIM		; STORE WAIT
	RTS
;
;
;
;
;
AUDIO
;		AUDIO SERVICE ROUTINE
;
;		CH4 NOTE SECTION
	LDA	NPRIOR
	BEQ	AUDIO1
	DEC	NDURTM		; TIMING OUT ?
	BPL	AUDIO1		; YES
	LDA	NOTVOL
	BEQ	AUDIO2		; NEXT NOTE
	LDA	SDURAT		; SPACE BETWEEN NOTE
	BMI	AUDIO2
	STA	NDURTIM
	LDY	#$00
	BEQ	AUDIO3		; JUMP
AUDIO2
	LDA	NDURAT
	STA	NDURTM
	LDX	NOTSEQ
	INC	NOTSEQ
	LDA	NOTTAB,X
	STA	AUDF4
	LDY	#$A8
	CMP	#$FF
	BNE	AUDIO3
	LDA	REPPTR
	STA	NOTSEQ
	DEC	REPSEQ
	BPL	AUDIO2
	LDY	#$00
	STY	NPRIOR
AUDIO3
	STY	AUDC4
	STY	NOTVOL
AUDIO1
	LDA	EXPDEL		; ZYLON HIT SERVICE
	BEQ	AUD11
	DEC	EXPDEL
	BNE	AUD11
	LDX	#NOITB2-NOISTB
	JSR	NOISE
AUD11
	LDX	SPEED
	TXA
	LSR	A
	LSR	A
	LSR	A
	LSR	A
	LSR	A
	CMP	AUDTIM
	BCC	AUDIO
	LDA	#$00
	STA	AUDTIM
;			ENGINES
	INX
	TAX
	EOR	#$FF
	STA	AUDF3
	TAX
	ASL	A
	ASL	A
	ASL	A
	ASL	A
	ASL	A
	STA	AUDF1
	TXA
	LSR	A
	LSR	A
	LSR	A
	STA	AUDF2
	LSR	A
	EOR	#$8F
	STA	AUDC2
	AND	#$87
	STA	AUDC3
	LDA	#$70
	STA	AUDCTL
	RTS
AUD10
	LDA	AUDEXP		; EXPLOSION SERVICE
	BEQ	AUDIO4
	DEC	AUDEXP
	BNE	AUDIO4
	LDA	#$8F
	STA	ATYPE2
AUDIO4
	LDX	PHOREP
	BEQ	AUDIO5
	DEC	PHREP
	BNE	AUD12
	LDA	#$AF
	STA	ATYPE2
	LDA	#$02
	STA	AFREQ1
	STA	AFREQ2
AUDI12
	LDA	PHOTB2-1,X
	STA	ATYPE3
	LDA	PHOTB4-1,X
	STA	AUDF3
	STA	STIMER
AUDIO5
	LDA	BIGEXP		; FINAL EXPLOS SERVICE
	BEQ	AUDIO6
	DEC	BIGEXP
	LDA	RANDOM
	STA	AUDF3
	AND	#$20
	EOR	ATYPE3
	STA	ATYPE3
AUDIO6
	CLC		; SWEEP DOWN CH1-2
	LDA	AFREQ1
	ADC	AUDADD
	STA	AFREQ1
	STA	AUDF1
	LDA	AFREQ2
	ADC	#$00
	STA	AFREQ2
	STA	AUDF2
;			VOLUME CONTROL
	LDX	ATYPE2
	LDY	ATYPE3
	LDA	TIMERX
	LSR	A
	BCC	AUDIO7
	LDA	AUDTIM
	BEQ	AUDIO7
	DEC	AUDTIM
	CMP	#$11
	BCS	AUDIO7
	TXA
	AND	#$0F
	BEQ	AUDIO8
	DEX
	STX	ATYPE2
AUDIO8
	TYA
	AND	#$0F
	BEQ	AUDIO7
	DEY
	STY	ATYPE3
AUDIO7
	STX	AUDC2
	STY	AUDC3
	RTS
;
;
;
NOTINT
;		AUDIO  NOTE INIT, X=CH4TAB PNTR
	LDA	CH4TAB,X
	CMP	NPRIOR
	BCC	NOTIN2
	LDY	#$05
NOTIN1
	LDA	CH4TAB,X
	STA	NOTSEQ,Y
	INX
	DEY
	BPL	NOTIN1
NOTIN2
	RTS

;
;
;
;
;
LDTABS
;		INIT PTAB,BCDCON,VCONL,VCONH,DISCTL,CHTRAM
;
	LDX	#89
LDTB10
	LDA	#$0D
	STA	DISPLY+5,X
	CPX	#$0A
	BCS	LDTAB8
;		LD PF COLORS
	LDA	CLITAB,X
	STA	COLRAM+4,X
LDTAB8
	DEX
	BPL	LDTB10
	LDA	#$70
	STA	DISPLY+0
	STA	DISPLY+1
	LDA	#$41
	STA	DISPLY+103
	LDA	#DISPLY
	STA	DISPLY+104
	LDA	#DISPLY/256
	STA	DISPLY+105
;
;
;
;
;
	LDX	#$00
	STX	PNTR
	STX	PNTR+1
	STX	TEMP
	STX	TEMP1
LDTAB1
	CLC
	LDA	PNTR
	ADC	#SCPTAB
	STA	PNTR
	LDA	PNTR+1
	STA	PTAB,X
	ADC	#$00
	STA	PNTR+1
	CLC
	LDA	TEMP
	ADC	#SCBCD
	STA	TEMP
	LDA	TEMP1
	STA	BCDCON,X
	SED
	ADC	#$00
	CLD
	STA	TEMP1
	INX
	BNE	LDTAB1
;
	LDX	#$00
	STX	PNTR
	LDA	#MEMMAP/256
	STA	PNTR+1
LDTAB2
	CLC
	LDA	PNTR
	STA	VCONL,X
	ADC	#SCVCON
	STA	PNTR
	LDA	PNTR+1
	STA	VCONH,X
	ADC	#$00
	STA	PNTR+1
	LDA	STINIT,X
	STA	DISCTL,X
	INX
	CPX	#100
	BCC	LDTAB2
	DEX		; X=99, DONT JUMP IMMEDIATELY
	STX	JMPTIM
;
	LDX	#$03
	STX	CHTRAM+72	; NOTHING IN SHIPS INIT QUAD
LDTAB3
	LDA	CHRTAB,X
	STA	TEMP
	LDY	MISDIF
	INY
	INY
	STY	TEMP 1
LDTAB4
	LDA	RANDOM
	AND	#$7F
	TAY
	LDA	CHTRAM,Y
	BNE	LDTAB4
	LDA	TEMP
	;		STARBASES NOT ON EDGES
	BPL	LDTAB7
	CPY	#$10
	BCC	LDTAB4
	CPY	#$70
	BCS	LDTAB4
	TYA
	AND	#$0F
	BEQ	LDTAB4
	CMP	#$0F
	BEQ	LDTAB4
	LDA	CHTRAM-1,Y
	ORA	CHTRAM+1,Y
	ORA	CHTRAM+16,Y
	ORA	CHTRAM-16,Y
	BNE	LDTAB4
	LDA	TEMP
LDTAB7
	STA	CHTRAM,Y
	DEC	TEMP1
	BPL	LDTAB4
	DEX
	BPL	LDTAB3
;		LOAD HORIZ WALL OF CHART
	LDX	#180
LDTAB5
	LDA	#$0A
	STA	CHTDIS-1,X
	DEX
	BNE	LDTAB5
	LDX	#$0F		; LD HORIZ LINE
LDTAB6
	LDA	#$18
	STA	CHTDIS+2,X
	DEX
	BPL	LDTAB6
;
	LDA	#$1A		; FILL IN THE DOT ON THE CHART
	STA	CHTDIS+18
;
	LDA	#$00
	STA	CHTRAM+72
	LDA	#72
	STA	QUADRT
	LDA	#67
	STA	GHPOS
	STA	HYHPOS
	LDA	#$47
	STA	HYVPOS
	STA	GVPOS
	LDA	#$EA
	STA	BCDCON+255		; INFIINITY SIGN
;
;		FALL THROUGH TO LDGALT
;
LDGALT
;
;		LD UP THE GALACTIC CHART
;		TRANSFER CHTRAM TO CHTDIS
;
	LDY	#$00		; CHTDIS PNTR
	STY	TEMP		; CHTRAM PNTR
LDGAL1
	LDX	TEMP
	LDA	CHTRAM,X		; WHATS IN QUAD
	BPL	LDGAL2		; NO
	LDA	#$05		; STARBASE DEFAULT
LDGAL2
	TAX
	LDA	CHTABL,X		; CODE FOR CHTDIS
	STA	CHTDIS+22,Y
	INY
	INC	TEMP
	LDA	TEMP
	AND	#$0F		; END OF LINE ?
	BNE	LDGAL1		; NO
	LDA	#$19		; VERT LINE
	STA	CHTDIS+22,Y
	INY
	INY
	INY		; ADVANCE TO NEXT LINE
	INY
	CPY	#160		; ALL DONE ?
	BCC	LDGAL1		; NO
	RTS
;
;
;
;
TIMERS
;		SERVICE TIMERS, STARDATE AND ZYLON JUMP
;	UPDATE TIMEX, USED FOR STAR INTENSITY MULTIPLEX
;
	INC	BINTIM		; UPDATE BINARY TIMER
	LDX	#DIMBLU
	LDA	BINTIM
	BPL	TIME46
	LDY	DENERG+0
	CPY	#$80
	BNE	TIME46
	LDX	#RED
TIME46
	AND	#$03
	STA	TIMERX
	BNE	TIME33
;	SHIELDS SECTION
	LDY	SHENER
	BEQ	TIME31
	LDY	#DBLUE
	BIT	DAMAGE+2
	BPL	TIME47
	BVS	TIME32
	LDA	RANDOM
	CMP	#200
	BCC	TIME31
TIME32
	LDY	#$00
TIME47
	TYA
	BNE	TIME31
	LDX	#YELLOW
TIME31
	STY	SPABAK
	STX	COLRAM+13
TIME33
;		END UPDATE TIMERX
;
;		PHOTON TIMEOUT
	LDX	#402
TIMER6
	LDA	GINDEX+2,X		; PHOTON ?
	BNE	TIMER7
	LDA	STFLAG+2,X		; PHOTON TIMEOUT ?
	BEQ	TIMER7		; YES
	DEC	STFLAG+2,X		; DEC PHOTON TIMER
TIMER7
	DEX
	BPL	TIMER6
;
;		EXPLOSION TIMEOUT
;
	LDA	ETIMER
	BEQ	TIME10
	DEC	ETIMER
	BNE	TIMER9
	LDX	#STLAST+1		; 1 FOR FALL THROUGH
	STX	NSTARS
TIMER9
	CMP	#$70
	BCS	TIME30
	LDX	#$00
	STX	HITME
TIME30
	CMP	#$18
	BCS	TIME10
	DEC	NSTARS
TIME10
	DEC	SECOND
	BPL	TIMER1
	LDA	#$28
	STA	SECOND
	LDX	#$04
TIMER2
	INC	DSDATE,X
	LDA	DSDATE,X
	CMP	#$DA
	BCC	TIMER3
	LDA	#$D0
		   STA	DSDATE,X
	CPX	#$03
	BNE	TIMER4
	DEX
TIMER4
	DEX
	BPL	TIMER2
TIMER3
	DEC	JMPTIM
	BMI	TIMER5
TIMER1
	RTS
TIMER5
	LDA	#49
	STA	JMPTIM
;		RATING DUE TO TIME
	LDA	RATING
	BNE	TIME61
	DEC	RATING+1
TIME61
	DEC	RATING
	LDX	ATRACT		; GAME OVER ?
	BNE	TIMER1		; YES
;			ZYLONS JUMP
	; CHECK ALL STARBASES TO SEE IF DESTROYED
	; X=0 FROM ABOVE
	STX	TEMP
TIME12
	LDA	CHTRAM,X		; STARBASE ?
	BPL	TIME11			; NO
	JSR	TIMHLP
	BEQ	TIME11
;			STARBASE DESTROUED
	LDA	#$02		; 4 ZYLONS
	STA	CHTRAM,X
	STA	TEMP
	SEC
	LDA	RATING
	SBC	#18
	STA	RATING
	LDA	RATING+1
	SBC	#$00
	STA	RATING+1
;
TIME11
	INX
	BPL	TIME12
	LDA	TEMP		; ANY STARBASES DESTROYED ?
	BEQ	TIME13		; NO
	BIT	DAMAGE+5		; COMMUNICATIONS
	BVS	TIME13
	LDY	#SENDES-SENTAB
	JSR	LDMESS
	LDX	#CH4TB5-CH4TAB		; MESSAGE
	JSR	NOTINT
TIME13
	DEC	JMPOUT		; JUMP TIMEOUT
	BMI	TIME28
	LDX	KILBAS
	LDA	CHTRAM,X		; NEED A NEW BASE ?
	BMI	TIME14		; NO
TIME28
	LDA	#$07		; JUMP TIMEOUT RESTORED
	STA	JMPOUT
	LDY	#127
TIME15
	LDA	RANDOM
	AND	#$7F
	TAX
	LDA	CHTRAM,X
	BMI	TIME14		; NEW BASE
	DEY
	BPL	TIME15		; TRY AGAIN
	LDX	#127
TIME16
	LDA	CHTRAM,X
	BMI	TIME14
	DEX
	BPL	TIME16
	RTS
;
TIME14
	STX	KILBAS		; STORE STXRBASE
	TXA
	AND	#$0F
	STA	KILOCH
	TXA
	LSR	A
	LSR	A
	LSR	A
	LSR	A
	STA	KILOCV
	LDX	#$FF
TIME18			; MAIN LOOP
	INX
	BPL	TIME40
;		END ZYLON JUMP ROUTINE
	LDX	#$00
TIME20
	LDA	CHTRAM,X
	AND	#$DF
	STA	SHTRAM,X
	INX
	BPL	TIME20
	BIT	DAMAGE+5
	BVS	TIME44
	LDX	#$00		; ANY STARBASES SURROUNDED ?
TIME21
	LDA	CHTRAM,X
	BPL	TIME19
	JSR	TIMHLP
	BEQ	TIME19
;		STAR	BASE SURROUNDED
	LDA	#99
	STA	JMPTIM		; 99 CENTONS BEFORE DESTROY
	LDY	#SENSUR-SENTAB
	JSR	LDMESS
	LDX	#CH4TB5-CH4TAB
	JMP	NOTINT
TIME19
	INX
	BPL	TIME21
TIME44
	RTS
TIME40
	LDY	CHTRAM,X
	CPY	#$0A		; STARBASE , OR ALREADY CALCULATED
	BCS	TIME18
	LDA	RANDOM
	CMP	JMPWHN,Y
	BCS	TIME18
	CPX	QUADRT
	BEQ	TIME18
;		CALCULATE GRADIENT
	LDY	#$08
TIME27
	CLC
	TXA
	ADC	JMPTAB,Y
	STA	TEMP
	AND	#$0F
	SEC
	SBC	KILOCH
	BCS	TIME26
	EOR	#$FF
	ADC	#$01
TIME26
	STA	TEMP1
	LDA	TEMP
	LSR	A
	LSR	A
	LSR	A
	LSR	A
	SEC
	SBC	KILOCV
	BCS	TIME22
	EOR	#$FF
	ADC	#$01
TIME22
	CLC
	ADC	TEMP1
	STA	JMPPTS,Y
	DEY
	BPL	TIME27
;		ZYLON CONVERGENCE
	LDA	#$01
	STA	TEMP1
TIME23
	LDY	#$07
TIME24
	LDA	JMPPTS,Y
	CMP	JMPPTS+8
	BCS	TIME42
	CLC
	TXA
	ADC	JMPTAB,Y
	BMI	TIME42
	STY	TEMP
	TAY
	LDA	CHTRAM,Y
	BNE	TIME25
	LDA	CHTRAM,X
	CPY	QUADRT
	BEQ	TIME25
	ORA	#$20
	STA	CHTRAM,Y
	LDA	#$00
	STA	CHTRAM,X
	BEQ	TIME45
TIME25
	LDY	TEMP
TIME42
	DEY
	BPL	TIME24
	INC	JUMPPTS+8
	DEC	TEMP1
	BPL	TIME23
TIME45
	JMP	TIME18
;
;
;
ROHELP
;	HELPER SUB FOR YROTAT, ZROTAT
	LDA	XSIGN,X
	EOR	#$01
	BEQ	ROHLP1
	LDA	#$FF
ROHLP1
	STA	TEMP1
	STA	TEMP2
	LDA	XPOSH,X
	STA	TEMP
	LDA	RANDOM
	ORA	#$BF
	EOR	XPOSL,X
	ASL	A
	ROL	TEMP
	ROL	TEMP1
	ASL	A
	ROL	TEMP
	ROL	TEMP1
;
	LDA	TEMP3		; JOYSTICK
	EOR	#$FF		; TOGGLES EVERY TIME THROUGH, CALL TWICE/STAR
	STA	TEMP3		; THEN OK, THIS CAN BE TRICKY SO WATCH OUT !!
;
	BMI	ROHLP2
	CLC
	LDA	XPOSL,Y
	ADC	TEMP
	STA	XPOSL,Y
	LDA	XSIGN,Y
	ASC	TEMP
	STA	XPOSL,Y
	LDA	XSIGN,Y
	ADC	TEMP1
	STA	XPOSH,Y
	LDA	XSIGN,Y
	ADC	TEMP2
	STA	XSIGN,Y
	RTS
ROHLP2
	SEC
	LDA	XPOSL,Y
	SBC	TEMP
	STA	XPOSL,Y
	LDA	XPSH,Y
	SBC	TEMP1
	STA	XPOSH,Y
	LDA	XSIGN,Y
	SBC	TEMP2
	STA	XSIGN,Y
	RTS
;
;
;
STHPOS
;		STORE HPOS, X=STR INDEX
	CMP	#HOFLOW
	BCS	STVPS1
	STA	TEMP3
	LDA	#HSTCEN
	CPX	#OBJNUM
	BCS	STHPS2
	LDA	#HOBCEN
STHPS2
	LDY	YSIGN,X
	BNE	STHPS3
	SEC
	INC	TEMP3
	SBC	TEMP3
	STA	HPOS,X
	RTS
STHPS3
	CLC
	ADC	TEMP3
	STA	HPOS,X
	RTS
;
S1VPOS
;		STORE VPOS, X=STAR INDEX
	CMP	#VOFLOW
	BCS	STVPS1
	STA	TEMP3
	LDA	#VSTCEN
	CPX	#OBJNUM
	BCS	STVPS2
	ASL	TEMP3
	LDA	#VOBCEN
STVPS2
	BIT	DISFLG		; SECTOR SCAN ?
	BVC	STVPS5		; NO
	BIT	DAMAGE+4
	BPL	STVPS7
	BIT	RANDOM
	BVC	STVPS6
	BVS	STVPS3
STVPS7
	LDY	XSIGN,X
	BNE	STVPS6
	BEQ	STVPS3
STVPS5
	LDY	ZSIGN,X
	BEQ	STVPS3
STVPS6
	SEC
	INC	TEMP3
	SBC	TEMP3
	STA	VPOS,X
	RTS
STVPS3
	CLC
	ADC	TEMP3
	STA	VPOS,X
	RTS
STVPS1		; ENTRY POINT FROM STHPOS  **************
	CPX	#OBJNUM
	BCS	STVPS4
	LDA	#$FB
	STA	VPOS,X
STVPS8		; ENTRY POINT FROM NEWSTR  ***************
	RTS
STVPS4
;
;		FALL THROUGH TO NEWSTR  ***************************
;
NEWSTR
;		NEW STAR POSITION
	LDA	#99		; RESET TO BOTTOM OF SCREEN
	STA	VPOS,X
	STA	HPOS,X
	CPX	#STLAST+1		; EXPLOSION STARS
	BCS	STVPS8		; YES
	LDA	RANDOM		; UPDATE Z
	AND	#$0F
	STA	TEMP
	STA	ZPOSH,X
	LDA	RANDOM		; UPDATE Y
	AND	#$0F
	CMP	TEMP
	BCC	NEWST3
	STA	TEMP
NEWST3
	STA	YPOSH,X
;
	LDA	#$0F
	STA	XPOSH,X
	LDA	DISFLG		; UPDATE X
	EOR	#$01
	AND	#$01
	STA	XSIGN,X
	BNE	NEWST5
	STA	YPOSL,X
	STA	ZPOSL,X
	SEC
	SBC	TEMP
	STA	XPOSH,X
;		TRY THIS FIX,  BELOW
	LDA	#$80
	STA	XPOSL,X
;
NEWST5
;
	BIT	DISFLG		; SECTOR SCAN ?
	BVC	NEWST2		; NO
	LDA	RANDOM
	STA	YPOSH,X
	LDA	RANDOM
	STA	XPOSH,X
	AND	#$01
	STA	XSIGN,X
NEWST2
;
NEWST4		; ENTRY POINT FROM HLINES SUB   *****************
;		DETERMINE SIGN Y,Z
	LDA	RANDOM
	AND	#$01
	STA	ZSIGN,X
	BNE	NEWST1
	SEC
	SBC	ZPOSL,X
	STA	ZPOSL,X
	LDA	#$00
	SBC	ZPOSH,X
	STA	ZPOSH,X
NEWST1
	LDA	RANDOM
	AND	#$01
	STA	YSIGN,X
	BNE	NEWST6
	SEC
	SBC	YPOSL,X
	STA	YPOSL,X
	LDA	#$00
	SBC	YPOSH,X
	STA	YPOSH,X
NEWST6
	RTS
;
;
;
;
TIMHLP
;		HELPER ROUTINE FOR TIMERS
	LDA	CHTRAM-1,X
	BEQ	TIMHP1
	LDA	CHTRAM+1,X
	BEQ	TIMHP1
	LDA	CHTRAM-16,X
	BEQ	TIMHP1
	LDA	CHTRAM+16,X
TIMHP1
	RTS
;
;
;
;
;
;
;
PANDIS
;		PANNEL DISPLAY ROUTINE
;		ONE ENTRY POINT AT PANDS6
;	UPDATE VELOCITY DISPLAY
	LDX	SPEED
	CPX	WARP
	BEQ	PANDS2
	BCC	PANDS3
	DEC	SPEED
	BCS	PANDS1
PANDS3
	INC	SPEED
PANDS2
	LDA	HFLAG
	BNE	PANDS1
	BIT	DAMAGE+1
	BPL	PANDS1
	LDA	WARP
	AND	RANDOM
	STA	SPEED
;
;
PANDS1				; ALL DONE VELOCITY DISPLAY
	LDY	#DVELOC-DISCTL-1
	JSR	TWOCM3
	BIT	DAMAGE+3		; COMPUTER DAMAGE
	BMI	PANDS4
;		UPDATE COORDINATES DISPLAY
	LDA	#RAMNUM		; DISPLAY Y COORD
	LDY	#DTHETA-DISCTL	; DISPLAY IN THETA
	JSR	TWOCOM		; UPDATE THETA
	LDA	#RAMNUM*2		; DISPLAY Z COORD
	LDY	#DPHI-DISCTL		; DISPLAY IN PHI
	JSR	TWOCOM		; UPDATE PHI
	LDA	#$00		; DISPLAY X COORD
	LDY	#DRHO-DISCTL		; DISPLAY IN RHO
	JSR	TWOCOM		; UPDATE RHO
;		LOW BYTE OF RHO
	LDA	DRHO+2		; PUT BLANK IN LSB IF INFINITE
	STA	DHRO+3
	CMP	#$0A		; INFINITE ?
	BCS	PANDS4		; YES
	LDX	DCSTOR		; WHICH OBJ TRACKING
	LDA	XPOSL,X		; LOW BYTE
	LSR	A
	LSR	A
	LSR	A
	LSR	A
	TAX
	LDA	BCDCON,X		; CONVERT TO BCD
	STA	DRHO+3		; LSB UPDATED
PANDS4				; ALL DONE COORD DISP
;				UPDATE ENERGY DISPLAY
;		UPDATE ENERGY DUE TO SHIELDS WARPS ATTACK COMPUTER
	CLC
	LDA	ENFLAG		; LSRB OF ENERGY, DEC ENERGY WHEN CARRY
	ADC	SHENER		; DRAIN FROM SHIELDS
	ADC	WPENER		; DRAIN FROM WARP
	ADC	ATENER		; DRAIN FROM ATTACK COMPUTER
	ADC	#$01		; LIFE SUPPORT
	CMP	ENFLAG		; SET CARRY FLAG
	STA	ENFLAG
	BCS	PANDS5
;			DECRE ENERGY
	LDA	#$03		; DECRE BIT 3 OF ENERGY
PANDS6		; ENTRY POINT TO DECRE ENERGY   *************************
	BIT	ATRACT		; GAME OVER ?
	BVS	PANDS5		; YES
;	X MUST BE DEFINED = BIT TO DECRE FROM
	DEC	DENERG,X
	LDA	DENERG,X
	CMP	#$80		; CHECK IF BORROW
	BCS	PANDS5		; NO BORROW
	LDA	#$89
	STA	DENERG,X
	CPX	#$02
	BNE	PANDS7
	LDA	RATING
	BNE	PANDS8
	DEC	RATING+1
PANDS8
	DEC	RATING
PANDS7
	DEX
	BPL	PANDS6		; NEXT DIGIT
;			OUT OF ENERGY  !!
	LDX	#$0A		; KEY F
	TXA
	LDY	#$03
PAND10
	STA	DENERG+0,Y
	DEY
	BPL	RAND10
	JSR	KEYS15
	LDY	#SENOUT-SENTAB
	LDX	#$04
	JSR	CRATE
PANDS9
PANDS5
	RTS
;
;

;
TWOCOM
;		TWOS OMPLEMENT AND CONVERT TO B CD HELPER ROUTINE
;	A=OFFSET(X,Y,Z), Y=WHERE TO STORE
	CLC
	ADC	DCSTOR		; WHICH OBJ TRACKING
	TAX
	LDA	#$10		; + SIGN
	STA	TEMP
	LDA	XSIGN,X		; SIGN OF OBJ
	LSR	A
	LDA	XPOSH,X
	BCS	TWOCM1
;		NEGATIVE VALUE, TWOS COMPLEMENT
	EOR	#$FF
	DEC	TEMP		; - SIGN
TWOCM1
	TAX
	LDA	TEMP
	STA	DISCTL+0,Y		; STORE SIGN
;
;		NO INFINITY FOR THETA OR PHI
	TYA
	AND	#$10		; THETA OR PHI ?
	BEQ	TWOCM3		; NO
	CPX	#$FF		; INFINITY ?
	BNE	TWOCM3		; NO
	DEX			; X=FE, NOT FF
;
;
TWOCM3			; ENTRY POINT TO LOAD ONLY **************
;
	LDA	BCDCON,X		; BCD CONVERT
	TAX
	AND	#$0F
	STA	DISCTL+2,Y		; LOW BYTE STOED
	TXA
	LSR	A
	LSR	A
	LSR	A
	LSR	A
	STA	DISCTL+1,Y		; HIGHT BYTE STORED
	RTS
;
;
;
;
;
;
;
;		TABLES;
CLINDX		; COLOR INDEX TABLE USED IN OBJCOL SUBROUTINE
	.BYTE	0,1,2,3,7

;
;
PHGRAF		; PHOTON GRAPHIC
	.BYTE	0
	.BYTE	$18,$3C,$7E,$7E,$76,$F7,$DF,$DF,$FF,$FF,$F7,$76,$7E,$7E,$3C,$18





PHGRF1
	.BYTE	$10,$38,$7C,$7C,$FE,$DE,$DA,$FA,$EE,$EE,$7C,$7C,$38,$10




PHGRF2
	.BYTE	$18,$3C,$3C,$7E,$6E,$7A,$7E,$76,$7E,$3C,$3C,$18



PHGRF3
	.BYTE	$10,$38,$38,$7C,$74,$7C,$6C,$38,$38,$10



PHGRF4
	.BYTE	$10,$18,$3C,$2C,$3C,$3C,$18,$08


PHGRF5
	.BYTE	$10,$38,$38,$28,$38,$10

;
DKGRAF		; DOCKING SHIP GRAPHIC
	.BYTE	$3C,$3C,$24,$3C,$7E,$7E,$7E,$5A,$FF,$FF,$42,$42,$42,$42,$42,$42





DKGRF1
	.BYTE	$1C,$1C,$14,$3E,$3E,$3E,$2A,$7F,$7F,$22,$22,$22,$22,$22




DKGRF2
	.BYTE	$18,$18,$3C,$3C,$3C,$3C,$7E,$24,$24,$24,$24



DKGRF3
	.BYTE	$10,$10,$38,$38,$38,$7C,$28,$28,$28


DKGRF4
	.BYTE	$18,$18,$3C,$18,$18

DKGRF5
	.BYTE	$10
GBASM6
	.BYTE	$10,$38,$10
;
     	;
;
GBASEM
	.BYTE	$18,$7E,$FF,$FF,$FF,$FF,$FF,$E7,$E7,$FF,$FF,$FF,$FF,$FF,$7E,$7E





GBASM1
	.BYTE	0
	.BYTE	$18,$3C,$7E,$FF,$FF,$FF,$E7,$66,$FF,$FF,$FF,$FF,$7E,$7E




GBASM2
	.BYTE	0
	.BYTE	$18,$3C,$7E,$FF,$FF,$E7,$66,$FF,$FF,$FF,$FF,$3C



GBASM3
	.BYTE	$18,$3C,$FF,$FF,$E7,$66,$FF,$FF,$7E,$3C



GBASM4
	.BYTE	0
	.BYTE	$18,$3C,$FF,$FF,$FF,$3C,$18


GBASM5
	.BYTE	$18,$3C,$FF,$3C,$18
;
HWARTG		; HWARP TARGET GRAPHIC
	.BYTE	$28,$28,$28,$28,$EE,0,0,$EE,$28,$28,$28,$28



;
;
;
;
ZYGRAF		; GRAFIC OF ZYLON SHIP BASED ON XPOS
	.BYTE	0		; BLANK
	.BYTE	$81,$81,$81,$81,$BD,$FF,$FF,$BD,$81,$81,$81,$81



ZYGRF1
	.BYTE	$82,$82,$BA,$FE,$FE,$BA,$82,$82


ZYGRF2
	.BYTE	$42,$5A,$7E,$7E,$5A,$42

ZYGRF3
	.BYTE	$44,$54,$7C,$7C,$54,$44

ZYGRF4
	.BYTE	$28,$38,$38,$28

ZYGRF6
	.BYTE	$18,$18
;
;
ZYGRF7
	.BYTE	$10,$10
GBASER
	.BYTE	$E0,$F8,$F8,$FE,$57,$FE,$F8,$F8,$C0


GBASR3
	.BYTE	$C0,$F0
GBASR1
	.BYTE	$C0,$F0,$F0,$FC,$BE,$FC,$F0,$80,$80


GBASR2
	.BYTE	$C0,$C0,$F0,$BC,$F0,$C0

;
;
;
GBASEL
	.BYTE	7,$1F,$1F,$7F,$EA,$7F,$1F,$1F,$3


GBASL3
	.BYTE	3,$F
GBASL1
	.BYTE	3,$F,$F,$3F,$7D,$3F,$F,1,1


GBASL2
	.BYTE	3,3,$F,$3D,$F,3

;
;
;
;
ROGRAF
	.BYTE	$18,$3C,$7E,$7E,$DB,$C3,$81,$81,$81


ROGRF1
	.BYTE	$10,$38,$7C,$7C,$D6,$C6,$82,$82


ROGRF2
	.BYTE	$18,$3C,$3C,$66,$66,$42,$42


ROGRF3
	.BYTE	$10,$38,$38,$6C,$44,$44

ROGRF4
	.BYTE	$18,$3C,$24,$24

;
;
ROGRF5
	.BYTE	$10,$38,$28
;
;
KLGRAF
	.BYTE	$18,$3C,$7E,$FF,$18,$18,$FF,$7E,$3C,$18



KLGRF1
	.BYTE	$10,$38,$7C,$FE,$38,$38,$FE,$7C,$38,$10



KLGRF2
	.BYTE	$18,$3C,$7E,$18,$7E,$3C,$18


KLGRF3
	.BYTE	$18,$3C,$18,$3C,$18


KLGRF5
	.BYTE	$10,$38,$38,$10

;
;
;
;
LISTAB		; DISPLAY LIST TABLE  LDISP
;	SHIP ALIVE
	.BYTE	$8D,0,$46
	.WORD	DISCTL
	.BYTE	$20,6,0
LISTB2		; GAL CHT
	.BYTE	1
	.WORD	GLDISP
LISTB3		; SECT SCAN
	.BYTE	0,0,$46
	.WORD	SESCAN
	.BYTE	$4D
	.WORD	MEMMAP+200
LISTB4		; BACK VIEW
	.BYTE	0,0,$46
	.WORD	BACKUP
	.BYTE	$4D
	.WORD	MEMMAP+200
LISTB5		; FRONT VIEW
	.BYTE	$4D
	.WORD	MEMMAP
	.BYTE	$0D,$0D,$0D,$0D,$0D

LISTB6		; MESSAGE ON
	.BYTE	$30,$46
	.WORD	MESAGE
	.BYTE	$4D
	.WORD	MEMMAP+680
;
;
DISDIS		; FOR KEYSRV  , DISPLAY LIST POINTERS
	.BYTE	LISTB5-LISTAB,LISTB4-LISTAB,LISTB3-LISTAB,LISTB2-LISTAB

;
;
BRTABL		; BRIGHTNESS SELECT TABLE
	.BYTE	BRT,BRT,BRT,BRT

	.BYTE	MED,BRT,MED,BRT

	.BYTE	MED,MED,MED,BRT

	.BYTE	MED,MED,MED,MED

	.BYTE	MED,MED,MED,DIM

	.BYTE	DIM,MED,DIM,MED

	.BYTE	DIM,DIM,DIM,MED

	.BYTE	DIM,DIM,DIM,DIM

;
;
MASK		; MASK FOR RAM MAP BYTE DUE TO HPOS
	.BYTE	$C0,$30,$0C,$03

;
;
WARPTB		; SELECT WARP ACCEL FROM KEY 0-9
	.BYTE	0,$01,$02,$04,$08,$10,$20,$40,$60,$70



;
;
CODCON		; USED IN KEYSRV SUBROUTINE FOR KEY CONVERT
	.BYTE	$F2,$DF,$DE,$DA,$D8,$DD,$DB,$F3,$F5,$F0



	.BYTE	$F8,$FF,$C0,$FD,$EF,$FE,$D2,$F9,$E5,$CA



	.BYTE	$E7
;
WENTAB			; ENERGY USED PER WARP
	.BYTE	0,4,6,8,10,12,14,30,45,60



;
;
;
;
;
;
;
;
ENGTAB			; ENERGY USED PER DISTANCE WARP JUMP
	.BYTE	10,13,16,20,23,50,70,80,90,120,125,130,135,140,155,170,184,200





	.BYTE	208,216,223,232,241,250

;
;
;
;
;
JOYTAB		; CODE FOR EACH POSITION ON JOYSTICK
	.BYTE	0,$1,$FF,0

;
;
;
INSTAB		; INSET LINES TABLE    HDRAW,VDRAW,NUMPTS
	.BYTE	$50,$28,$87,$50,$36,$87

	.BYTE	119,70,30,119,86,30,119,70,$91,148,70,$91



	.BYTE	120,78,6,126,75,15,126,81,15,141,78,7



	.BYTE	133,71,$84,126,76,$85,140,76,$85,133,82,$84



;
;
INSTB1		; HORIZ CROSS HAIRS
	.BYTE	$3E,$32,15,$54,$32,15

	.BYTE	$FE			; ALL DONE
;
INSTB2			; SECTOR SCAN SHIP
	.BYTE	$4E,$35,$82,$4F,$34,$82,$50,$32,$85,$51,$34,$82,$52,$35,$82




	.BYTE	$FF			; ALL DONE
;
;
;
;
;
;
;
YINIT		; HLINES
	.BYTE	4,4,3,2

ZINIT		; HLINES
	.BYTE	2,3,4,4

;
;
;
;
;
;
;
;
;
;
STINT		; STATUS INIT TABLE (LDTABS)
	.BYTE	18,11,0,0,10,$55,$4B,$40,$40,10,$8D,$8B,$89,$89,$89,$89





	.BYTE	10,$16,11,0

	.BYTE	10
	.BYTE	$14,$0B,$04,0,0,10,$51,$4B,$0F,0,0,10,$93,$8B,$0F,0,0,0





	.BYTE	10
	.BYTE	$37,$21,$32,$30,0,$25,$2E,$25,$32,$27,$39,$1A,0,0,0




	.BYTE	$10,0,0,0,0

	.BYTE	$B4,$A1,$B2,$A7,$A5,$B4,$B3,$9A,0,0



	.BYTE	$24,$23,$1A,$30,$25,$33,$23,$2C,$32


	.BYTE	0
	.BYTE	$F3,$F4,$E1,$F2,0,$E4,$F4,$E5,$DA,$D0,$D0,$CE,$D0




	.BYTE	$D0,0,0,0,0,0

;
CHRTAB		; TABLE FOR LDTABS ROUTINE
	.BYTE	$CF,4,3,2

;
;
;
;
;
;
SENTAB		; TABLE OF SENTENSES
	.BYTE	0		; BUFFER
SENACN				; ATTACK COMPUTER ON
	.BYTE	5,6,$42
SENACF				; ATTACK COMPUTER OFF
	.BYTE	5,6,$43
SENSON				; SHIELDS ON
	.BYTE	4,$42
SENSOF				; SHIELDS OFF
	.BYTE	4,$43
SENCTN				; COMPUTER TRACKING ON
	.BYTE	6,7,$42
SENCTF				; COMPUTER TRACKING OFF
	.BYTE	7,$43
SENWHT				; WHAT?
	.BYTE	$48
SENHYP				; HYPERWARP ENGAGED
	.BYTE	9,$4A
SENSUR
	.BYTE	11,$CD		; STARBASE SURROUNDED
SENDES
	.BYTE	11,$CC		; STARBASE DESTROYED
SENHWA			; HYPERWARP ABORTE
	.BYTE	9,$4E
SENHWC				; HYPERWARD COMPLETE
	.BYTE	9,$4F
SENHSP				; HYPERSPACE
	.BYTE	$D0
SENORB		; ORBIT ESTABLISHED
	.BYTE	17,$92,$56
SENDKA		; DOCKING ABORTED
	.BYTE	19,$4E
SENETC			; ENERGY TRANSFER COMPLETE
	.BYTE	21,$4F
SENDST		; YOU ARE DESTROYED
	.BYTE	$B8,$97,$99,$98,$8C,$9D,30,$9F,$FD,37,$FC,$78



SENATA		; TITLE
	.BYTE	$9B,$60
;
;
SENOUT		; OUT OF ENERGY
	.BYTE	$B8,$97,$98,26,$8E,28,$94,36,$9F,$FD,37,$FC,$A7,$68




SENWIN		; YOU WIN
	.BYTE	$B8,$97,$98,26,$8F,36,$9F,$FD,37,$FC,$66



SENNOV		; NOVICE MISSION
	.BYTE	44,$5A
SENPIL		; PILOT MISSION
	.BYTE	46,$5A
SENWAR		; WARRIOR MISSION
	.BYTE	49,$5A
;
;
SENCOM			; COMMANDER MISSION
	.BYTE	51,$5A
SENDMC	; DAMAGE CONTROL
	.BYTE	$B8,52,$76
SENPDM		; PHOTONS DAMAGED
	.BYTE	55,$B5,$78
SENPDS		; PHOTONS DESTROYED
	.BYTE	55,$8C,$78
SENEDM		; ENGINES DAMAGED
	.BYTE	35,$B5,$78
SENSDM		; SHIELDS DAMAGED
	.BYTE	4,$B5,$78
SENSDS		; SHIELDS DESTROYED
	.BYTE	4,$8C,$78
SENCDM	; COMPUTER DAMAGED
	.BYTE	6,$B5,$78
SENCDS		; COMPUTER DESTROYED
	.BYTE	6,$8C,$78
SENTDM		; SECTOR SCAN DAMAGED
	.BYTE	$A2,$75
SENTDS		; SECTOR SCAN DESTROYED
	.BYTE	$A2,$4C
SENMDM		; COMMUNICATIONS DAMAGED
	.BYTE	$A1,$75
SENMDS		; COMMUNICATIONS DESTROYED
	.BYTE	$A1,$4C
SENRED		; RED ALERT
	.BYTE	$C1
SENABR		; MISSION ABORTED KEY
	.BYTE	$B8,$97,$98,26,$8E,36,$9F,$FD,37,$FC,$66



;
;
;
WRDTAB			; TABLE OF WORDS
	.BYTE	$A0,"    RED ALERT"




	.BYTE	$CF,"N"
	.BYTE	$CF,"FF"
	.BYTE	$D3,"HIELDS"


	.BYTE	$C1,"TTACK"

	.BYTE	$C3,"OMPUTER"


	.BYTE	$D4,"RACKING"


	.BYTE	$D7,"HATS WRONG?"



	.BYTE	$C8,"YPERWARP"


	.BYTE	$C5,"NGAGED"


;
;
	.BYTE	$D3,"TARBASE"


	.BYTE	$C4,"ESTROYED"


	.BYTE	$D3,"URROUNDED"



	.BYTE	$C1,"BORTED"


	.BYTE	$C3,"COMPLETE"


	.BYTE	$C8,"YPERSPACE"



	.BYTE	$CF,"RBIT"

	.BYTE	$C5,"STABLISHED"



	.BYTE	$C4,"OCKING"


	.BYTE	$C5,"NERGY"

	.BYTE	$D4,"RANSFER"


	.BYTE	$D3,"TANDBY"


	.BYTE	$D3,"TAR FLEET TO"




	.BYTE	$D3,"TAR CRUISER 7"




;
;
	.BYTE	$C1,"LL UNITS"


	.BYTE	$CD,"ISSION"


	.BYTE	$A0,"  STAR RAIDERS"




	.BYTE	$DA,"ERO"

	.BYTE	$C2,"Y ZYLON FIRE"




	.BYTE	$D0,"OSTHUMOUS"



	.BYTE	$D2,"AND IS:"


	.BYTE	$C3,"OPYRIGHT ATARI 1979"







	.BYTE	$D3,"UB-SPACE RADIO"



	.BYTE	$D3,"ECTOR SCAN"



	.BYTE	$C5,"NGINES"


	.BYTE	$CE,"EW"
	.BYTE	$C3,"LASS"

	.BYTE	$C3"ONGRATULATIONS"




;
;
	.BYTE	$D2,"EPORT TO BASE"




	.BYTE	$C6,"OR TRAINING"



	.BYTE	$C7,"ALACTIC COOK"




	.BYTE	$C7,"ARBAGE SCOW CAPTAIN"




	.BYTE	$D2,"OOKIE"

	.BYTE	$CE,"OVICE"

	.BYTE	$C5,"NSIGN"

	.BYTE	$D0,"ILOT"

	.BYTE	$C1,"CE"
	.BYTE	$CC,"IEUTENANT"



	.BYTE	$D7,"ARRIOR"


	.BYTE	$C3,"APTAIN"


;
;
	.BYTE	$C3,"OMMANDER"


	.BYTE	$C4,"AMAGE"

	.BYTE	$C4,"AMAGED"


	.BYTE	$C3,"ONTROL"


	.BYTE	$D0,"HOTONS"


;
	.BYTE	$A0		; BLANK
	.BYTE	$D3,"TAR COMMANDER"




	.BYTE	$80		; END TABLE
;
;
;
;
DISTYP			; CODE TO LOAD IN DISFLG
	.BYTE 0,1,$40,$80

TOFFMG		; POINTER TO TOGLE OFF MESSAGE
	.BYTE	SENCTF-SENTAB,SENSOF-SENTAB,SENACF-SENTAB
TOGTAB			; BYTE TO TOGGLE RAM BYTE WITH
	.BYTE	$FF,8,2
TONMSG		; POINTER TO TOGGLE ON MESSAGE
	.BYTE	SENCTN-SENTAB,SENSON-SENTAB,SENACN-SENTAB
;
;
;
;
;
GPOINT		; TABLE OF GRAPHIC POINTERS FOR THE OBJ (OBJCOL)
	.BYTE	1,PHGRF1-PHGRAF,PHGRF2-PHGRAF,PHGRF3-PHGRAF,PHGRF4-PHGRAF

	.BYTE	PHGRF5-PHGRAF,DKGRF4-PHGRAF,DKGRF5-PHGRAF
	.BYTE	1,ZYGRF1-ZYGRAF,ZYGRF2-ZYGRAF,ZYGRF3-ZYGRAF,ZYGRF4-ZYGRAF

	.BYTE	ZYGRF5-ZYGRAF,ZYGRF6-ZYGRAF,ZYGRF7-ZYGRAF
	.BYTE	GBASER-ZYGRAF
	.BYTE	GBASR1-ZYGRAF,GBASR2-ZYGRAF,GBASR3-ZYGRAF,GBASR3-ZYGRAF,0,0,0


	.BYTE	GBASEM-PHGRAF
	.BYTE	GBASM1-PHGRAF,GBASM2-PHGRAF,GBASM3-PHGRAF,GBASM4-PHGRAF

	.BYTE	GBASM5-PHGRAF,GBASM6-PHGRAF,DKGRF5-PHGRAF
	.BYTE	GBASEL-ZYGRAF
	.BYTE	GBASL1-ZYGRAF,GBASL2-ZYGRAF,GBASL3-ZYGRAF,GBASL3-ZYGRAF,0,0,0


	.BYTE	DKGRAF-PHGRAF
	.BYTE	DKGRF1-PHGRAF,DKGRF2-PHGRAF,DKGRF3-PHGRAF,DKGRF4-PHGRAF

	.BYTE	DKGRF5-PHGRAF,DKGRF4-PHGRAF,DKGRF5-PHGRAF
	.BYTE	1,PHGRF1-PHGRAF,PHGRF2-PHGRAF,PHGRF3-PHGRAF,PHGRF4-PHGRAF

	.BYTE	PHGRF5-PHGRAF,DKGRF4-PHGRAF,DKGRF5-PHGRAF
;
;
;
;
	.BYTE	ROGRAF-ZYGRAF
	.BYTE	ROGRF1-ZYGRAF,ROGRF2-ZYGRAF,ROGRF3-ZYGRAF,ROGRF4-ZYGRAF

	.BYTE	ROGRF5-ZYGRAF,ZYGRF6-ZYGRAF,ZYGRF7-ZYGRAF
	.BYTE	KLGRAF-ZYGRAF
	.BYTE	KLGRF1-ZYGRAF,KLGRF2-ZYGRAF,KLGRF3-ZYGRAF,KLGRF4-ZYGRAF

	.BYTE	KLGRF5-ZYGRAF,ZYGRF6-ZYGRAF,ZYGRF7-ZYGRAF
	.BYTE	HWARTG-PHGRAF,HWARTG-PHGRAF,HWARTG-PHGRAF,HWARTG-PHGRAF

	.BYTE	HWARTG-PHGRAF,HWARTG-PHGRAF,DKGRF4-PHGRAF,HWARTG-PHGRAF

;
NBYTAB		; NUMBER OF BYTES TO STORE  ( OBJCOL)
	.BYTE	15,13,11,9,7,5,1,1


	.BYTE	11,7,5,5,3,3,1,1


	.BYTE	9,8,5,2,0,0,0,0


	.BYTE	15,14,12,9,7,4,2,1


	.BYTE	9,8,5,2,0,0,0,0


	.BYTE	15,13,10,8,4,3,1,1


	.BYTE	15,13,11,9,7,5,1,1


	.BYTE	8,7,6,5,3,2,1,1


	.BYTE	9,9,6,6,4,3,1,1


	.BYTE	11,11,11,11,11,11,1,11


;
;
;
;
;
TRKTAB		; KEY FOR SWITCHING DISPLAY, ASERVE
	.BYTE	$F8,$FF
CHTABL	; FOR LDGALT, CODES FOR CHTDIS
	.BYTE	$0C,$1E,$1E,$1D,$1C,$1B

;
;
;
STERTB		; USED IN HWARP STEERING , OBJCOL
	.BYTE	$9F,$BF,$DF,$FF

;
;
;
BHORTB		; STAR BASE HORIZ OFFSET TABLE
	.BYTE	$F8,08
;
;
DIFTAB		; RATING,$DIFFICULTY TABLE
	.BYTE	80,76,60,111,60,60,50,100,40,50,40,90



RANKTB		; RAND WORD VS. RATING HI NIBBLE
	.BYTE	$A9,$AA,$AA,$AB,$AB,$AC,$AC,$AD,$AD,$AE,$AE,$AF,$B0,$B1,$B2,$B3





	.BYTE	$B3,$B9,$B9
;
;
CLASTB		; DMA ASCII CLASS VS RATING LO NIBBLE
	.BYTE	$95,$95,$95,$94,$94,$94,$94,$93,$93,$93,$92,$92,$92,$91




	.BYTE	$91,$91
;
MSENTB		; MISSION TYPE TABLE
	.BYTE	SENNOV-SENTAB,SENPIL-SENTAB,SENWAR-SENTAB,SENCOM-SENTAB

DPRBTB		; DAMAGE PROB BASED ON MISDIF
	.BYTE	0,80,180,$FE

DAMGTB		; SENTENCES FO DAMAGE (DAMCTL)
	.BYTE	SENPDM-SENTAB,SENEDM-SENTAB,SENSDM-SENTAB,SENCDM-SENTAB

	.BYTE	SENTDM-SENTAB,SENMDM-SENTAB
DESTTB		; SENTENCES FO DESTROY (DAMCTL)
	.BYTE	SENPDS-SENTAB,SENEDS-SENTAB,SENSDS-SENTAB,SENCDS-SENTAB

	.BYTE	SENTDS-SENTAB,SENMDS-SENTAB
;
;
NOISTB	; NOISE ROUTINE, INIT AUDTIM,AUDADD,AFREQ2,AFREQ1,ATYPE3
		; ATYPE2,AUDEXP,PHOREP,AUDCTL,AUDF3
;	FOR PHOTONS
	.BYTE	$18,$FF,2,0,$8A,$A0,0,8,$50,$00



NOITB1		; FOR SHIELD EXPLOSION
	.BYTE	$40,$40,1,3,$88,$AF,8,0,$50,4



NOITB2		; FOR ZYLON EXPLOS
	.BYTE	$30,$40,1,3,$84,$A8,4,0,$50,4



;
;
;
CH4TAB		; NOTINT,	INIT REPPTR,NPRIOR,SDURAT,NDURAT,REPSEQ,NOTSEQ
CH4TB1		; HYPERSPACE
	.BYTE	2,2,2,3,12,2

CH4TB2		; RED ALERT
	.BYTE	4,3,$FF,$10,7,4

CH4TB3		; KEYS
	.BYTE	7,4,2,2,0,7

CH4TB4		; DAMAGE
	.BYTE	11,5,$FF,$20,2,11

CH4TB5		; MESSAGE
	.BYTE	14,6,8,$20,0,14

;
;
;
NOTTAB		; TABL O NOTES, FF=RESERVED BYTE
	.BYTE	$10,$FF			; TRACKING
	.BYTE	$18,$FF			; HYPERSPACE
	.BYTE	$40,$60,$FF		; RED ALERT
	.BYTE	$10,$10,$10,$FF		; KEYS

	.BYTE	$40,$20,$FF		; DAMAGE
	.BYTE	$48,$40,$51,$FF		; STARFLEET MESSAGE

;
;
ZYTARG			; GRAPHIC OF ZYLON TARGET
	.BYTE	$84,$B4,$FC,$B4,$84

;
;
;
;
PHOYPS		; YPOSH FOR PHOTON
	.BYTE	$FF,1
;
PHPOST		; BOUNDS IN HITZYL
	.BYTE	$C,$C,$C,$C,$E,$E,$E,$20


;
;
;
PHPOSB		; BOUNDS IN HITZYL
	.BYTE	0,0,0,2,4,6,8,$C


;
;
;
;
PHODIF		; THINK
	.BYTE	$81,$84,$88,$94

ZYGIND		; THINK
	.BYTE	$80,$10,$10,$10,$70,$70,$70,$10


INTSEQ		; THINK
	.BYTE	4,4,0,0,0,1,0,0


;
ZYWARP		; THINK
	.BYTE	$3E,$1E,$10,8,4,2,1,0,0,$81,$82,$84,$88,$90,$9E,$BE





;
;
;
CLITAB		; LDTABS
	.BYTE	$A6,$AA,$FA,0,0,$B8,$5A,$FC,$5E,$90



;
;
JMASK		; HWARP SUB, USED FOR INITING TARG POSITIONS
	.BYTE	$FF,$FF,$3F,$0F,$3F,$7F,$FF,$FF


;
;
JMPWHN		; TIMERS, WHEN EACH ZYLON TYPE SHOULD JUMP
	.BYTE	0,$FF,$FF,$C0,$20

;
JMPTAB		; TIMERS , JUMP VECTORS FOR ZYLONS
	.BYTE	$F0,$EF,$FF,15,16,17,1,$F1,0


;
PHVECT	; POHELP
	.BYTE	0,8,$10,$18,$28,$30,$38,$40


;
;
;
COLTAB		; OBJCOL, CHROMA FOR EACH TYPE GRAPHIC
	.BYTE	$50,0,$20,$20,$20,0,$A0,0,0,$9F



;
COLINT		; OBJCOL, INTENSITY PER XPOSH
	.BYTE	$E,$E,$E,$C,$C,$C,$A,$A,$A,$8,$8,$8,$6,$6,$4,$4





;
;
PHOTB2		; AUDIO, ATYPE3
	.BYTE	$8A,$8F,$8D,$8B,$89,$87,$85,$83


PHOTB4		; AUDIO, AFREQ3
	.BYTE	0,4,1,4,1,4,1,4


PHASE5
;
;
;
;
;
;		CARTRIDGE OPERATING CODES
;
	*=$BFFC
	.BYTE	0		; CARTRIDGE IN FLAG
	.BYTE	$80		; RUN CARTRIDGE IMMEDIATELY
	.WORD	INIT		; START ADDR POINTER
;
PHASE9
;
;
;
;
;			RAM MAP
	*=$280
RAMMAP			; MISC RAM STORAGE
DISPLY			; DISPLAY LIST RAM
	*=*+128		; SEE EQUATES FOR INTERNAL LABELS
;
PHASE2
;
	*=$300
PGRAPH
MGRAPH			; MISSLE GRAPHICS RAM
	*=*+256
PGRAP0
	*=*+256
PGRAP1
	*=*+256
PGRAP2
	*=*+256
PGRAP3
	*=*+256
;
VCONL		; VERT CONVERT TABLE LO BYTE
	*=*+100
VCONH		; VERT CONVERT TABLE HI BYTE
	*=*+100
	*=*+1		; BUFFER BYTE
CHTRAM		; CHART RAM, MOW MANY ZYLONS IN EACH QUAD
	*=*+128
DISCTL		; DISPLAY OF CONTRAL STATUS PANNEL
	*=*+2
DVELOC		; DISP OF VELOC
	*=*+2
	*=*+3
DKILL		; DISP OF KILL
	*=*+2
	*=*+3
DENERG		; DISPLAY OF ENERGY
	*=*+4
	*=*+3
DCSTOR		; WHICH OBJ TRACKING
	*=*+1
;			NEXT LINE
	*=*+3
DTHETA		; DISPLAY OF THETA
	*=*+3
	*=*+3
DPHI			; DISPLAY OF PHI
	*=*+3
	*=*+3
DRHO			; DISPLAY OF RHO
	*=*+4
	*=*+1
;		NEXT LINE
DGALAC			; GALACTIC CHART INFO
	*=*+12
DWENER			; DISPLAY WARP ENERGY
	*=*+3
	*=*+5
;		NEXT LINE
	*=*+8
DTARG			; DISP OF TARGETS IN QUAD
	*=*+1
	*=*+4
DAMAGE		; DAMAGE CONTROL RAM, +0=PHOTONS,+1=ENGINES
	*=*+6		; +2=SHIELDS,+3=COM,PUTER,+4=SECTOR SCAN
			; +5=SUB-SPACE RADIO
	*=*+1
;		NEXT LINE
	*=*+10
DSDATE			; DISP OF STAR DATE
	*=*+5
	*=*+5
STRRAM		; RAM FOR STARS , OBJECTS  POSITIONS, ETC.
XSIGN		; SIGN OF XPOS
	*=*+RAMNUM
YSIGN
	*=*+RAMNUM
ZSIGN
	*=*+RAMNUM
XPOSH		; XPOS IN SPACE HI BYTE
	*=*+RAMNUM
YPOSH
	*=*+RAMNUM
ZPOSH
	*=*+RAMNUM
XPOSL		; XPOS IN SPACE LO BYTE
	*=*+RAMNUM
YPOSL
	*=*+RAMNUM
ZPOSL
	*=*+RAMNUM
XINCRE		; OBJECTS X DIRECTION VELOCITY
	*=*+RAMNUM
YINCRE
	*=*+RAMNUM
ZINCRE
	*=*+RAMNUM
VPOS		; VERT POS ON SCREEN
	*=*+RAMNUM
HPOS		; HORIZ POS ON SCREEN
	*=*+RAMNUM
OLDVER		; OLD VERT POSIT
	*=*+RAMNUM
GINDEX		; TYPE OF GRAPHIC,		OBJECT
OLDHOR		; OLD HORIZ POSIT		STARS
	*=*+RAMNUM
OLDNUM		; PREVIOUS NUMBER OF BYTES STORED		OBJECT
OLDBYT		; OLD BYTE IN RAM MAP				STARS
	*=*+RAMNUM
NUMBYT		; HOW MANY BYTES TO STORE		OBJECT
STRBYT		; THE BYTE TO STORE		STARS
	*=*+RAMNUM
MESAGE		; DISPLAY OF MESSAGE RAM
	*=*+20
	*=*+2		; BUFFER ZONE
;
CHTDIS		; CHAR GRAPHICS PNTR FO GALCHT
	*=*+180
;
PTAB		; X80 SCALER TABLE
	*=*+256
BCDCON		; BINARY TO BCD TABLE
	*=*+256
;
PHASE7
;
		*=$1000
MEMMAP			; SCREEN MAP RAM
	*=*+4096
MEMEND
PHASE3
;
;			END PROGRAM
	.END
